// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hyperloglog_top_bz_detector_12_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        N_dout,
        N_empty_n,
        N_read,
        N_out_din,
        N_out_full_n,
        N_out_write,
        hashFifo_5_dout,
        hashFifo_5_empty_n,
        hashFifo_5_read,
        bucketMetaFifo_5_din,
        bucketMetaFifo_5_full_n,
        bucketMetaFifo_5_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] N_dout;
input   N_empty_n;
output   N_read;
output  [63:0] N_out_din;
input   N_out_full_n;
output   N_out_write;
input  [63:0] hashFifo_5_dout;
input   hashFifo_5_empty_n;
output   hashFifo_5_read;
output  [47:0] bucketMetaFifo_5_din;
input   bucketMetaFifo_5_full_n;
output   bucketMetaFifo_5_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg N_read;
reg N_out_write;
reg hashFifo_5_read;
reg bucketMetaFifo_5_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    N_blk_n;
reg    N_out_blk_n;
reg    hashFifo_5_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln39_reg_208;
reg    bucketMetaFifo_5_blk_n;
reg   [63:0] i_reg_101;
reg   [63:0] N_read_reg_198;
wire   [63:0] i_46_fu_112_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln39_fu_118_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
reg   [15:0] p_Result_s_fu_141_p4;
wire   [31:0] p_Result_26_fu_151_p3;
reg   [31:0] op_assign_fu_159_p3;
wire   [0:0] tmp_fu_123_p3;
wire   [0:0] tmp_18_fu_171_p3;
wire   [4:0] trunc_ln174_fu_167_p1;
wire   [15:0] trunc_ln_fu_131_p4;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln39_fu_118_p2 == 1'd0))) begin
        i_reg_101 <= i_46_fu_112_p2;
    end else if ((~((real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_101 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        N_read_reg_198 <= N_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln39_reg_208 <= icmp_ln39_fu_118_p2;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_blk_n = N_empty_n;
    end else begin
        N_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_out_blk_n = N_out_full_n;
    end else begin
        N_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_out_write = 1'b1;
    end else begin
        N_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_read = 1'b1;
    end else begin
        N_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_118_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_208 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bucketMetaFifo_5_blk_n = bucketMetaFifo_5_full_n;
    end else begin
        bucketMetaFifo_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_208 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bucketMetaFifo_5_write = 1'b1;
    end else begin
        bucketMetaFifo_5_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_208 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hashFifo_5_blk_n = hashFifo_5_empty_n;
    end else begin
        hashFifo_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_208 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hashFifo_5_read = 1'b1;
    end else begin
        hashFifo_5_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln39_fu_118_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln39_fu_118_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign N_out_din = N_dout;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln39_reg_208 == 1'd0) & (bucketMetaFifo_5_full_n == 1'b0)) | ((icmp_ln39_reg_208 == 1'd0) & (hashFifo_5_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln39_reg_208 == 1'd0) & (bucketMetaFifo_5_full_n == 1'b0)) | ((icmp_ln39_reg_208 == 1'd0) & (hashFifo_5_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln39_reg_208 == 1'd0) & (bucketMetaFifo_5_full_n == 1'b0)) | ((icmp_ln39_reg_208 == 1'd0) & (hashFifo_5_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln39_reg_208 == 1'd0) & (bucketMetaFifo_5_full_n == 1'b0)) | ((icmp_ln39_reg_208 == 1'd0) & (hashFifo_5_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bucketMetaFifo_5_din = {{{{{{{{{{{{15'd0}, {tmp_fu_123_p3}}}, {7'd0}}}, {tmp_18_fu_171_p3}}}, {3'd0}}}, {trunc_ln174_fu_167_p1}}}, {trunc_ln_fu_131_p4}};

assign i_46_fu_112_p2 = (i_reg_101 + 64'd1);

assign icmp_ln39_fu_118_p2 = ((i_reg_101 == N_read_reg_198) ? 1'b1 : 1'b0);


always @ (p_Result_26_fu_151_p3) begin
    if (p_Result_26_fu_151_p3[0] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd0;
    end else if (p_Result_26_fu_151_p3[1] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd1;
    end else if (p_Result_26_fu_151_p3[2] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd2;
    end else if (p_Result_26_fu_151_p3[3] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd3;
    end else if (p_Result_26_fu_151_p3[4] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd4;
    end else if (p_Result_26_fu_151_p3[5] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd5;
    end else if (p_Result_26_fu_151_p3[6] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd6;
    end else if (p_Result_26_fu_151_p3[7] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd7;
    end else if (p_Result_26_fu_151_p3[8] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd8;
    end else if (p_Result_26_fu_151_p3[9] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd9;
    end else if (p_Result_26_fu_151_p3[10] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd10;
    end else if (p_Result_26_fu_151_p3[11] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd11;
    end else if (p_Result_26_fu_151_p3[12] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd12;
    end else if (p_Result_26_fu_151_p3[13] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd13;
    end else if (p_Result_26_fu_151_p3[14] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd14;
    end else if (p_Result_26_fu_151_p3[15] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd15;
    end else if (p_Result_26_fu_151_p3[16] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd16;
    end else if (p_Result_26_fu_151_p3[17] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd17;
    end else if (p_Result_26_fu_151_p3[18] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd18;
    end else if (p_Result_26_fu_151_p3[19] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd19;
    end else if (p_Result_26_fu_151_p3[20] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd20;
    end else if (p_Result_26_fu_151_p3[21] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd21;
    end else if (p_Result_26_fu_151_p3[22] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd22;
    end else if (p_Result_26_fu_151_p3[23] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd23;
    end else if (p_Result_26_fu_151_p3[24] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd24;
    end else if (p_Result_26_fu_151_p3[25] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd25;
    end else if (p_Result_26_fu_151_p3[26] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd26;
    end else if (p_Result_26_fu_151_p3[27] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd27;
    end else if (p_Result_26_fu_151_p3[28] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd28;
    end else if (p_Result_26_fu_151_p3[29] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd29;
    end else if (p_Result_26_fu_151_p3[30] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd30;
    end else if (p_Result_26_fu_151_p3[31] == 1'b1) begin
        op_assign_fu_159_p3 = 32'd31;
    end else begin
        op_assign_fu_159_p3 = 32'd32;
    end
end

assign p_Result_26_fu_151_p3 = {{16'd65535}, {p_Result_s_fu_141_p4}};

integer ap_tvar_int_0;

always @ (hashFifo_5_dout) begin
    for (ap_tvar_int_0 = 16 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 15 - 0) begin
            p_Result_s_fu_141_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_141_p4[ap_tvar_int_0] = hashFifo_5_dout[15 - ap_tvar_int_0];
        end
    end
end

assign start_out = real_start;

assign tmp_18_fu_171_p3 = hashFifo_5_dout[32'd32];

assign tmp_fu_123_p3 = hashFifo_5_dout[32'd40];

assign trunc_ln174_fu_167_p1 = op_assign_fu_159_p3[4:0];

assign trunc_ln_fu_131_p4 = {{hashFifo_5_dout[31:16]}};

endmodule //hyperloglog_top_bz_detector_12_s
