// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hyperloglog_top_estimate_cardinality_32_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        zero_count_dout,
        zero_count_empty_n,
        zero_count_read,
        accm_dout,
        accm_empty_n,
        accm_read,
        card_temp_din,
        card_temp_full_n,
        card_temp_write
);

parameter    ap_ST_fsm_state1 = 120'd1;
parameter    ap_ST_fsm_state2 = 120'd2;
parameter    ap_ST_fsm_state3 = 120'd4;
parameter    ap_ST_fsm_state4 = 120'd8;
parameter    ap_ST_fsm_state5 = 120'd16;
parameter    ap_ST_fsm_state6 = 120'd32;
parameter    ap_ST_fsm_state7 = 120'd64;
parameter    ap_ST_fsm_state8 = 120'd128;
parameter    ap_ST_fsm_state9 = 120'd256;
parameter    ap_ST_fsm_state10 = 120'd512;
parameter    ap_ST_fsm_state11 = 120'd1024;
parameter    ap_ST_fsm_state12 = 120'd2048;
parameter    ap_ST_fsm_state13 = 120'd4096;
parameter    ap_ST_fsm_state14 = 120'd8192;
parameter    ap_ST_fsm_state15 = 120'd16384;
parameter    ap_ST_fsm_state16 = 120'd32768;
parameter    ap_ST_fsm_state17 = 120'd65536;
parameter    ap_ST_fsm_state18 = 120'd131072;
parameter    ap_ST_fsm_state19 = 120'd262144;
parameter    ap_ST_fsm_state20 = 120'd524288;
parameter    ap_ST_fsm_state21 = 120'd1048576;
parameter    ap_ST_fsm_state22 = 120'd2097152;
parameter    ap_ST_fsm_state23 = 120'd4194304;
parameter    ap_ST_fsm_state24 = 120'd8388608;
parameter    ap_ST_fsm_state25 = 120'd16777216;
parameter    ap_ST_fsm_state26 = 120'd33554432;
parameter    ap_ST_fsm_state27 = 120'd67108864;
parameter    ap_ST_fsm_state28 = 120'd134217728;
parameter    ap_ST_fsm_state29 = 120'd268435456;
parameter    ap_ST_fsm_state30 = 120'd536870912;
parameter    ap_ST_fsm_state31 = 120'd1073741824;
parameter    ap_ST_fsm_state32 = 120'd2147483648;
parameter    ap_ST_fsm_state33 = 120'd4294967296;
parameter    ap_ST_fsm_state34 = 120'd8589934592;
parameter    ap_ST_fsm_state35 = 120'd17179869184;
parameter    ap_ST_fsm_state36 = 120'd34359738368;
parameter    ap_ST_fsm_state37 = 120'd68719476736;
parameter    ap_ST_fsm_state38 = 120'd137438953472;
parameter    ap_ST_fsm_state39 = 120'd274877906944;
parameter    ap_ST_fsm_state40 = 120'd549755813888;
parameter    ap_ST_fsm_state41 = 120'd1099511627776;
parameter    ap_ST_fsm_state42 = 120'd2199023255552;
parameter    ap_ST_fsm_state43 = 120'd4398046511104;
parameter    ap_ST_fsm_state44 = 120'd8796093022208;
parameter    ap_ST_fsm_state45 = 120'd17592186044416;
parameter    ap_ST_fsm_state46 = 120'd35184372088832;
parameter    ap_ST_fsm_state47 = 120'd70368744177664;
parameter    ap_ST_fsm_state48 = 120'd140737488355328;
parameter    ap_ST_fsm_state49 = 120'd281474976710656;
parameter    ap_ST_fsm_state50 = 120'd562949953421312;
parameter    ap_ST_fsm_state51 = 120'd1125899906842624;
parameter    ap_ST_fsm_state52 = 120'd2251799813685248;
parameter    ap_ST_fsm_state53 = 120'd4503599627370496;
parameter    ap_ST_fsm_state54 = 120'd9007199254740992;
parameter    ap_ST_fsm_state55 = 120'd18014398509481984;
parameter    ap_ST_fsm_state56 = 120'd36028797018963968;
parameter    ap_ST_fsm_state57 = 120'd72057594037927936;
parameter    ap_ST_fsm_state58 = 120'd144115188075855872;
parameter    ap_ST_fsm_state59 = 120'd288230376151711744;
parameter    ap_ST_fsm_state60 = 120'd576460752303423488;
parameter    ap_ST_fsm_state61 = 120'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 120'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 120'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 120'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 120'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 120'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 120'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 120'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 120'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 120'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 120'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 120'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 120'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 120'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 120'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 120'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 120'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 120'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 120'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 120'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 120'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 120'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 120'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 120'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 120'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 120'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 120'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 120'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 120'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 120'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 120'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 120'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 120'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 120'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 120'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 120'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 120'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 120'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 120'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 120'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 120'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 120'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 120'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 120'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 120'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 120'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 120'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 120'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 120'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 120'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 120'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 120'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 120'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 120'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 120'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 120'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 120'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 120'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 120'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 120'd664613997892457936451903530140172288;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [16:0] zero_count_dout;
input   zero_count_empty_n;
output   zero_count_read;
input  [31:0] accm_dout;
input   accm_empty_n;
output   accm_read;
output  [31:0] card_temp_din;
input   card_temp_full_n;
output   card_temp_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg zero_count_read;
reg accm_read;
reg card_temp_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [119:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    zero_count_blk_n;
reg    accm_blk_n;
reg    card_temp_blk_n;
wire    ap_CS_fsm_state120;
wire   [31:0] grp_fu_95_p2;
reg   [31:0] reg_129;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state68;
wire   [31:0] grp_fu_119_p2;
reg   [31:0] reg_135;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state113;
reg   [16:0] count_local_V_reg_238;
reg   [31:0] accm_read_reg_244;
wire   [31:0] tmp_5_fu_140_p1;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_102_p2;
reg   [31:0] raw_cardinality_reg_254;
wire    ap_CS_fsm_state17;
wire   [63:0] grp_fu_111_p1;
reg   [63:0] conv_i_reg_264;
wire    ap_CS_fsm_state19;
wire   [0:0] and_ln52_fu_179_p2;
reg   [0:0] and_ln52_reg_270;
wire   [0:0] icmp_ln874_fu_185_p2;
reg   [0:0] icmp_ln874_reg_274;
wire   [0:0] icmp_ln61_fu_211_p2;
reg   [0:0] icmp_ln61_reg_283;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln61_1_fu_217_p2;
reg   [0:0] icmp_ln61_1_reg_288;
wire   [0:0] and_ln61_fu_227_p2;
reg   [0:0] and_ln61_reg_293;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_90_p2;
reg   [31:0] sub_i_reg_297;
wire    ap_CS_fsm_state39;
wire   [31:0] grp_fu_108_p1;
reg   [31:0] conv3_i_reg_302;
wire    ap_CS_fsm_state74;
reg   [31:0] div4_i_reg_307;
wire    ap_CS_fsm_state90;
reg   [31:0] estimated_cardinality_1_reg_312;
wire    ap_CS_fsm_state119;
reg   [31:0] ap_phi_mux_estimated_cardinality_2_phi_fu_80_p8;
reg   [31:0] estimated_cardinality_2_reg_77;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state23;
reg    ap_block_state1;
wire    ap_CS_fsm_state30;
reg   [31:0] grp_fu_95_p0;
reg   [31:0] grp_fu_95_p1;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state114;
reg   [31:0] grp_fu_102_p0;
reg   [31:0] grp_fu_102_p1;
wire    ap_CS_fsm_state75;
wire   [31:0] grp_fu_108_p0;
wire    ap_CS_fsm_state18;
reg   [31:0] grp_fu_119_p1;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state91;
wire   [31:0] bitcast_ln52_fu_144_p1;
wire   [7:0] tmp_fu_147_p4;
wire   [22:0] trunc_ln52_fu_157_p1;
wire   [0:0] icmp_ln52_1_fu_167_p2;
wire   [0:0] icmp_ln52_fu_161_p2;
wire   [0:0] or_ln52_fu_173_p2;
wire   [0:0] grp_fu_114_p2;
wire   [63:0] bitcast_ln61_fu_194_p1;
wire   [10:0] tmp_2_fu_197_p4;
wire   [51:0] trunc_ln61_fu_207_p1;
wire   [0:0] or_ln61_fu_223_p2;
wire   [0:0] grp_fu_124_p2;
reg   [119:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 120'd1;
end

hyperloglog_top_fsub_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_10_full_dsp_1_U405(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1065353216),
    .din1(reg_129),
    .ce(1'b1),
    .dout(grp_fu_90_p2)
);

hyperloglog_top_fmul_32ns_32ns_32_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_6_max_dsp_1_U406(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_95_p0),
    .din1(grp_fu_95_p1),
    .ce(1'b1),
    .dout(grp_fu_95_p2)
);

hyperloglog_top_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U407(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_102_p0),
    .din1(grp_fu_102_p1),
    .ce(1'b1),
    .dout(grp_fu_102_p2)
);

hyperloglog_top_uitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_6_no_dsp_1_U408(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_108_p0),
    .ce(1'b1),
    .dout(grp_fu_108_p1)
);

hyperloglog_top_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U409(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(raw_cardinality_reg_254),
    .ce(1'b1),
    .dout(grp_fu_111_p1)
);

hyperloglog_top_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U410(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(raw_cardinality_reg_254),
    .din1(32'd1210056704),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_114_p2)
);

hyperloglog_top_flog_32ns_32ns_32_23_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
flog_32ns_32ns_32_23_full_dsp_1_U411(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(grp_fu_119_p1),
    .ce(1'b1),
    .dout(grp_fu_119_p2)
);

hyperloglog_top_dcmp_64ns_64ns_1_3_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_3_no_dsp_1_U412(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_i_reg_264),
    .din1(64'd4729079848716415795),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_124_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state120) & (card_temp_full_n == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd0 == and_ln61_reg_293) & (1'b1 == ap_CS_fsm_state23)) | ((1'd1 == and_ln52_fu_179_p2) & (icmp_ln874_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19)))) begin
        estimated_cardinality_2_reg_77 <= raw_cardinality_reg_254;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        estimated_cardinality_2_reg_77 <= reg_129;
    end else if (((1'd1 == and_ln52_reg_270) & (icmp_ln874_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state120) & (card_temp_full_n == 1'b1))) begin
        estimated_cardinality_2_reg_77 <= estimated_cardinality_1_reg_312;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        accm_read_reg_244 <= accm_dout;
        count_local_V_reg_238 <= zero_count_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        and_ln52_reg_270 <= and_ln52_fu_179_p2;
        conv_i_reg_264 <= grp_fu_111_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        and_ln61_reg_293 <= and_ln61_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        conv3_i_reg_302 <= grp_fu_108_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        div4_i_reg_307 <= grp_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        estimated_cardinality_1_reg_312 <= grp_fu_95_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        icmp_ln61_1_reg_288 <= icmp_ln61_1_fu_217_p2;
        icmp_ln61_reg_283 <= icmp_ln61_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln52_fu_179_p2) & (1'b1 == ap_CS_fsm_state19))) begin
        icmp_ln874_reg_274 <= icmp_ln874_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        raw_cardinality_reg_254 <= grp_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state29))) begin
        reg_129 <= grp_fu_95_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state62))) begin
        reg_135 <= grp_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        sub_i_reg_297 <= grp_fu_90_p2;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        accm_blk_n = accm_empty_n;
    end else begin
        accm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == accm_empty_n) | (zero_count_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        accm_read = 1'b1;
    end else begin
        accm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state120) & (card_temp_full_n == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln52_reg_270) & (icmp_ln874_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state120))) begin
        ap_phi_mux_estimated_cardinality_2_phi_fu_80_p8 = estimated_cardinality_1_reg_312;
    end else begin
        ap_phi_mux_estimated_cardinality_2_phi_fu_80_p8 = estimated_cardinality_2_reg_77;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        card_temp_blk_n = card_temp_full_n;
    end else begin
        card_temp_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state120) & (card_temp_full_n == 1'b1))) begin
        card_temp_write = 1'b1;
    end else begin
        card_temp_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_102_p0 = 32'd1199570944;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_102_p0 = 32'd1329112663;
    end else begin
        grp_fu_102_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_102_p1 = conv3_i_reg_302;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_102_p1 = tmp_5_fu_140_p1;
    end else begin
        grp_fu_102_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        grp_fu_119_p1 = div4_i_reg_307;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_119_p1 = sub_i_reg_297;
    end else begin
        grp_fu_119_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state63))) begin
        grp_fu_95_p0 = reg_135;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_95_p0 = raw_cardinality_reg_254;
    end else begin
        grp_fu_95_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        grp_fu_95_p1 = 32'd1199570944;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_95_p1 = 32'd3481272320;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_95_p1 = 32'd796917760;
    end else begin
        grp_fu_95_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state120) & (card_temp_full_n == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        zero_count_blk_n = zero_count_empty_n;
    end else begin
        zero_count_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == accm_empty_n) | (zero_count_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        zero_count_read = 1'b1;
    end else begin
        zero_count_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == accm_empty_n) | (zero_count_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'd1 == and_ln52_fu_179_p2) & (icmp_ln874_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end else if (((1'd1 == and_ln52_fu_179_p2) & (icmp_ln874_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'd0 == and_ln61_reg_293) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            if (((1'b1 == ap_CS_fsm_state120) & (card_temp_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln52_fu_179_p2 = (or_ln52_fu_173_p2 & grp_fu_114_p2);

assign and_ln61_fu_227_p2 = (or_ln61_fu_223_p2 & grp_fu_124_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

always @ (*) begin
    ap_block_state1 = ((1'b0 == accm_empty_n) | (zero_count_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign bitcast_ln52_fu_144_p1 = raw_cardinality_reg_254;

assign bitcast_ln61_fu_194_p1 = conv_i_reg_264;

assign card_temp_din = ap_phi_mux_estimated_cardinality_2_phi_fu_80_p8;

assign grp_fu_108_p0 = count_local_V_reg_238;

assign icmp_ln52_1_fu_167_p2 = ((trunc_ln52_fu_157_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_161_p2 = ((tmp_fu_147_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln61_1_fu_217_p2 = ((trunc_ln61_fu_207_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_211_p2 = ((tmp_2_fu_197_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln874_fu_185_p2 = ((count_local_V_reg_238 == 17'd0) ? 1'b1 : 1'b0);

assign or_ln52_fu_173_p2 = (icmp_ln52_fu_161_p2 | icmp_ln52_1_fu_167_p2);

assign or_ln61_fu_223_p2 = (icmp_ln61_reg_283 | icmp_ln61_1_reg_288);

assign start_out = real_start;

assign tmp_2_fu_197_p4 = {{bitcast_ln61_fu_194_p1[62:52]}};

assign tmp_5_fu_140_p1 = accm_read_reg_244;

assign tmp_fu_147_p4 = {{bitcast_ln52_fu_144_p1[30:23]}};

assign trunc_ln52_fu_157_p1 = bitcast_ln52_fu_144_p1[22:0];

assign trunc_ln61_fu_207_p1 = bitcast_ln61_fu_194_p1[51:0];

endmodule //hyperloglog_top_estimate_cardinality_32_s
