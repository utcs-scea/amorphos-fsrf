// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hyperloglog_top_bll (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        s_axis_input_tuple_dout,
        s_axis_input_tuple_empty_n,
        s_axis_input_tuple_read,
        m_axis_write_data_din,
        m_axis_write_data_full_n,
        m_axis_write_data_write,
        N_s_dout,
        N_s_empty_n,
        N_s_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [1023:0] s_axis_input_tuple_dout;
input   s_axis_input_tuple_empty_n;
output   s_axis_input_tuple_read;
output  [63:0] m_axis_write_data_din;
input   m_axis_write_data_full_n;
output   m_axis_write_data_write;
input  [63:0] N_s_dout;
input   N_s_empty_n;
output   N_s_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg s_axis_input_tuple_read;
reg m_axis_write_data_write;
reg N_s_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    N_s_blk_n;
reg   [63:0] N_read_reg_1024;
wire    grp_hyperloglog_fu_524_s_axis_input_tuple_read;
wire   [63:0] grp_hyperloglog_fu_524_m_axis_write_data_din;
wire    grp_hyperloglog_fu_524_m_axis_write_data_write;
wire    grp_hyperloglog_fu_524_ap_start;
wire    grp_hyperloglog_fu_524_ap_done;
wire    grp_hyperloglog_fu_524_ap_ready;
wire    grp_hyperloglog_fu_524_ap_idle;
reg    grp_hyperloglog_fu_524_ap_continue;
reg    grp_hyperloglog_fu_524_ap_start_reg;
reg    ap_block_state1_ignore_call6;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_hyperloglog_fu_524_ap_ready;
wire    ap_sync_grp_hyperloglog_fu_524_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_hyperloglog_fu_524_ap_ready;
reg    ap_sync_reg_grp_hyperloglog_fu_524_ap_done;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_hyperloglog_fu_524_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_hyperloglog_fu_524_ap_ready = 1'b0;
#0 ap_sync_reg_grp_hyperloglog_fu_524_ap_done = 1'b0;
end

hyperloglog_top_hyperloglog grp_hyperloglog_fu_524(
    .s_axis_input_tuple_dout(s_axis_input_tuple_dout),
    .s_axis_input_tuple_empty_n(s_axis_input_tuple_empty_n),
    .s_axis_input_tuple_read(grp_hyperloglog_fu_524_s_axis_input_tuple_read),
    .m_axis_write_data_din(grp_hyperloglog_fu_524_m_axis_write_data_din),
    .m_axis_write_data_full_n(m_axis_write_data_full_n),
    .m_axis_write_data_write(grp_hyperloglog_fu_524_m_axis_write_data_write),
    .N(N_read_reg_1024),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .N_ap_vld(1'b1),
    .ap_start(grp_hyperloglog_fu_524_ap_start),
    .ap_done(grp_hyperloglog_fu_524_ap_done),
    .ap_ready(grp_hyperloglog_fu_524_ap_ready),
    .ap_idle(grp_hyperloglog_fu_524_ap_idle),
    .ap_continue(grp_hyperloglog_fu_524_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_hyperloglog_fu_524_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_hyperloglog_fu_524_ap_done <= 1'b0;
        end else if ((grp_hyperloglog_fu_524_ap_done == 1'b1)) begin
            ap_sync_reg_grp_hyperloglog_fu_524_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_hyperloglog_fu_524_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_hyperloglog_fu_524_ap_ready <= 1'b0;
        end else if ((grp_hyperloglog_fu_524_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_hyperloglog_fu_524_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_hyperloglog_fu_524_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_hyperloglog_fu_524_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | (~((real_start == 1'b0) | (1'b0 == N_s_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_hyperloglog_fu_524_ap_start_reg <= 1'b1;
        end else if ((grp_hyperloglog_fu_524_ap_ready == 1'b1)) begin
            grp_hyperloglog_fu_524_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        N_read_reg_1024 <= N_s_dout;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_s_blk_n = N_s_empty_n;
    end else begin
        N_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == N_s_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_s_read = 1'b1;
    end else begin
        N_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_hyperloglog_fu_524_ap_continue = 1'b1;
    end else begin
        grp_hyperloglog_fu_524_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_axis_write_data_write = grp_hyperloglog_fu_524_m_axis_write_data_write;
    end else begin
        m_axis_write_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        s_axis_input_tuple_read = grp_hyperloglog_fu_524_s_axis_input_tuple_read;
    end else begin
        s_axis_input_tuple_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (1'b0 == N_s_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (1'b0 == N_s_empty_n) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call6 = ((real_start == 1'b0) | (1'b0 == N_s_empty_n) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_hyperloglog_fu_524_ap_ready & ap_sync_grp_hyperloglog_fu_524_ap_done) == 1'b0);
end

assign ap_ready = internal_ap_ready;

assign ap_sync_grp_hyperloglog_fu_524_ap_done = (grp_hyperloglog_fu_524_ap_done | ap_sync_reg_grp_hyperloglog_fu_524_ap_done);

assign ap_sync_grp_hyperloglog_fu_524_ap_ready = (grp_hyperloglog_fu_524_ap_ready | ap_sync_reg_grp_hyperloglog_fu_524_ap_ready);

assign grp_hyperloglog_fu_524_ap_start = grp_hyperloglog_fu_524_ap_start_reg;

assign m_axis_write_data_din = grp_hyperloglog_fu_524_m_axis_write_data_din;

assign start_out = real_start;

endmodule //hyperloglog_top_bll
