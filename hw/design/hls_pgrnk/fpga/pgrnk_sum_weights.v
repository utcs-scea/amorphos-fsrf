// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pgrnk_sum_weights (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ie_counts_dout,
        ie_counts_empty_n,
        ie_counts_read,
        in_weights_dout,
        in_weights_empty_n,
        in_weights_read,
        weights_din,
        weights_full_n,
        weights_write,
        num_verts_dout,
        num_verts_empty_n,
        num_verts_read,
        num_verts_out_din,
        num_verts_out_full_n,
        num_verts_out_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] ie_counts_dout;
input   ie_counts_empty_n;
output   ie_counts_read;
input  [63:0] in_weights_dout;
input   in_weights_empty_n;
output   in_weights_read;
output  [63:0] weights_din;
input   weights_full_n;
output   weights_write;
input  [63:0] num_verts_dout;
input   num_verts_empty_n;
output   num_verts_read;
output  [63:0] num_verts_out_din;
input   num_verts_out_full_n;
output   num_verts_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ie_counts_read;
reg in_weights_read;
reg weights_write;
reg num_verts_read;
reg num_verts_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ie_counts_blk_n;
wire    ap_CS_fsm_state3;
reg    in_weights_blk_n;
wire    ap_CS_fsm_state5;
reg    weights_blk_n;
wire    ap_CS_fsm_state6;
reg   [0:0] icmp_ln62_1_reg_177;
reg    num_verts_blk_n;
reg    num_verts_out_blk_n;
reg   [63:0] num_verts_read_reg_171;
wire   [0:0] icmp_ln62_1_fu_134_p2;
wire    ap_CS_fsm_state2;
reg   [63:0] tmp_reg_181;
wire   [63:0] i_fu_139_p2;
reg   [63:0] i_reg_187;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln67_1_fu_145_p2;
reg   [0:0] icmp_ln67_1_reg_193;
wire   [63:0] j_fu_150_p2;
wire   [63:0] sum_fu_156_p2;
reg   [63:0] sum_reg_202;
reg   [63:0] i6_reg_89;
reg    ap_block_state6;
wire   [0:0] icmp_ln62_fu_167_p2;
reg   [63:0] j4_reg_100;
wire   [0:0] icmp_ln67_fu_162_p2;
reg   [63:0] sum2_reg_111;
reg   [63:0] ap_phi_mux_sum3_phi_fu_126_p4;
reg   [63:0] sum3_reg_122;
reg    ap_block_state1;
reg   [5:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln62_1_reg_177 == 1'd0) & (weights_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & ((icmp_ln62_1_reg_177 == 1'd1) | (icmp_ln62_fu_167_p2 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_1_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i6_reg_89 <= 64'd0;
    end else if ((~((icmp_ln62_1_reg_177 == 1'd0) & (weights_full_n == 1'b0)) & (icmp_ln62_1_reg_177 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln62_fu_167_p2 == 1'd0))) begin
        i6_reg_89 <= i_reg_187;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_1_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j4_reg_100 <= 64'd0;
    end else if (((in_weights_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln67_fu_162_p2 == 1'd0))) begin
        j4_reg_100 <= j_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_1_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum2_reg_111 <= 64'd0;
    end else if (((in_weights_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln67_fu_162_p2 == 1'd0))) begin
        sum2_reg_111 <= sum_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln62_1_reg_177 == 1'd0) & (weights_full_n == 1'b0)) & (icmp_ln67_1_reg_193 == 1'd0) & (icmp_ln62_1_reg_177 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sum3_reg_122 <= sum_reg_202;
    end else if (((icmp_ln67_1_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        sum3_reg_122 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_187 <= i_fu_139_p2;
        icmp_ln67_1_reg_193 <= icmp_ln67_1_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln62_1_reg_177 <= icmp_ln62_1_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        num_verts_read_reg_171 <= num_verts_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((in_weights_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        sum_reg_202 <= sum_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_reg_181 <= ie_counts_dout;
    end
end

always @ (*) begin
    if ((~((icmp_ln62_1_reg_177 == 1'd0) & (weights_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & ((icmp_ln62_1_reg_177 == 1'd1) | (icmp_ln62_fu_167_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln67_1_reg_193 == 1'd0) & (icmp_ln62_1_reg_177 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_sum3_phi_fu_126_p4 = sum_reg_202;
    end else begin
        ap_phi_mux_sum3_phi_fu_126_p4 = sum3_reg_122;
    end
end

always @ (*) begin
    if ((~((icmp_ln62_1_reg_177 == 1'd0) & (weights_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & ((icmp_ln62_1_reg_177 == 1'd1) | (icmp_ln62_fu_167_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ie_counts_blk_n = ie_counts_empty_n;
    end else begin
        ie_counts_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ie_counts_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ie_counts_read = 1'b1;
    end else begin
        ie_counts_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_weights_blk_n = in_weights_empty_n;
    end else begin
        in_weights_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_weights_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        in_weights_read = 1'b1;
    end else begin
        in_weights_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_verts_blk_n = num_verts_empty_n;
    end else begin
        num_verts_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_verts_out_blk_n = num_verts_out_full_n;
    end else begin
        num_verts_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((num_verts_out_full_n == 1'b0) | (num_verts_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_verts_out_write = 1'b1;
    end else begin
        num_verts_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((num_verts_out_full_n == 1'b0) | (num_verts_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_verts_read = 1'b1;
    end else begin
        num_verts_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_1_reg_177 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        weights_blk_n = weights_full_n;
    end else begin
        weights_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln62_1_reg_177 == 1'd0) & (weights_full_n == 1'b0)) & (icmp_ln62_1_reg_177 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        weights_write = 1'b1;
    end else begin
        weights_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((num_verts_out_full_n == 1'b0) | (num_verts_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln62_1_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ie_counts_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln67_1_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((in_weights_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln67_fu_162_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((in_weights_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln67_fu_162_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((icmp_ln62_1_reg_177 == 1'd0) & (weights_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & ((icmp_ln62_1_reg_177 == 1'd1) | (icmp_ln62_fu_167_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln62_1_reg_177 == 1'd0) & (weights_full_n == 1'b0)) & (icmp_ln62_1_reg_177 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln62_fu_167_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((num_verts_out_full_n == 1'b0) | (num_verts_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((icmp_ln62_1_reg_177 == 1'd0) & (weights_full_n == 1'b0));
end

assign i_fu_139_p2 = (i6_reg_89 + 64'd1);

assign icmp_ln62_1_fu_134_p2 = ((num_verts_read_reg_171 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_167_p2 = ((i_reg_187 == num_verts_read_reg_171) ? 1'b1 : 1'b0);

assign icmp_ln67_1_fu_145_p2 = ((tmp_reg_181 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_162_p2 = ((j_fu_150_p2 == tmp_reg_181) ? 1'b1 : 1'b0);

assign j_fu_150_p2 = (j4_reg_100 + 64'd1);

assign num_verts_out_din = num_verts_dout;

assign sum_fu_156_p2 = (in_weights_dout + sum2_reg_111);

assign weights_din = ap_phi_mux_sum3_phi_fu_126_p4;

endmodule //pgrnk_sum_weights
