// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module optical_flow_read_frames123 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        i,
        frames,
        frame1_0_V_V_din,
        frame1_0_V_V_full_n,
        frame1_0_V_V_write,
        frame1_1_V_V_din,
        frame1_1_V_V_full_n,
        frame1_1_V_V_write,
        frame1_2_V_V_din,
        frame1_2_V_V_full_n,
        frame1_2_V_V_write,
        frame1_3_V_V_din,
        frame1_3_V_V_full_n,
        frame1_3_V_V_write,
        frame2_0_V_V_din,
        frame2_0_V_V_full_n,
        frame2_0_V_V_write,
        frame2_1_V_V_din,
        frame2_1_V_V_full_n,
        frame2_1_V_V_write,
        frame2_2_V_V_din,
        frame2_2_V_V_full_n,
        frame2_2_V_V_write,
        frame2_3_V_V_din,
        frame2_3_V_V_full_n,
        frame2_3_V_V_write,
        frame3a_0_V_V_din,
        frame3a_0_V_V_full_n,
        frame3a_0_V_V_write,
        frame3a_1_V_V_din,
        frame3a_1_V_V_full_n,
        frame3a_1_V_V_write,
        frame3a_2_V_V_din,
        frame3a_2_V_V_full_n,
        frame3a_2_V_V_write,
        frame3a_3_V_V_din,
        frame3a_3_V_V_full_n,
        frame3a_3_V_V_write,
        frame3b_0_V_V_din,
        frame3b_0_V_V_full_n,
        frame3b_0_V_V_write,
        frame3b_1_V_V_din,
        frame3b_1_V_V_full_n,
        frame3b_1_V_V_write,
        frame3b_2_V_V_din,
        frame3b_2_V_V_full_n,
        frame3b_2_V_V_write,
        frame3b_3_V_V_din,
        frame3b_3_V_V_full_n,
        frame3b_3_V_V_write,
        frame4_0_V_V_din,
        frame4_0_V_V_full_n,
        frame4_0_V_V_write,
        frame4_1_V_V_din,
        frame4_1_V_V_full_n,
        frame4_1_V_V_write,
        frame4_2_V_V_din,
        frame4_2_V_V_full_n,
        frame4_2_V_V_write,
        frame4_3_V_V_din,
        frame4_3_V_V_full_n,
        frame4_3_V_V_write,
        frame5_0_V_V_din,
        frame5_0_V_V_full_n,
        frame5_0_V_V_write,
        frame5_1_V_V_din,
        frame5_1_V_V_full_n,
        frame5_1_V_V_write,
        frame5_2_V_V_din,
        frame5_2_V_V_full_n,
        frame5_2_V_V_write,
        frame5_3_V_V_din,
        frame5_3_V_V_full_n,
        frame5_3_V_V_write,
        outputs,
        i_c_din,
        i_c_full_n,
        i_c_write,
        outputs_c_din,
        outputs_c_full_n,
        outputs_c_write
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_state2 = 76'd2;
parameter    ap_ST_fsm_state3 = 76'd4;
parameter    ap_ST_fsm_state4 = 76'd8;
parameter    ap_ST_fsm_state5 = 76'd16;
parameter    ap_ST_fsm_state6 = 76'd32;
parameter    ap_ST_fsm_state7 = 76'd64;
parameter    ap_ST_fsm_state8 = 76'd128;
parameter    ap_ST_fsm_state9 = 76'd256;
parameter    ap_ST_fsm_state10 = 76'd512;
parameter    ap_ST_fsm_state11 = 76'd1024;
parameter    ap_ST_fsm_state12 = 76'd2048;
parameter    ap_ST_fsm_state13 = 76'd4096;
parameter    ap_ST_fsm_state14 = 76'd8192;
parameter    ap_ST_fsm_state15 = 76'd16384;
parameter    ap_ST_fsm_state16 = 76'd32768;
parameter    ap_ST_fsm_state17 = 76'd65536;
parameter    ap_ST_fsm_state18 = 76'd131072;
parameter    ap_ST_fsm_state19 = 76'd262144;
parameter    ap_ST_fsm_state20 = 76'd524288;
parameter    ap_ST_fsm_state21 = 76'd1048576;
parameter    ap_ST_fsm_state22 = 76'd2097152;
parameter    ap_ST_fsm_state23 = 76'd4194304;
parameter    ap_ST_fsm_state24 = 76'd8388608;
parameter    ap_ST_fsm_state25 = 76'd16777216;
parameter    ap_ST_fsm_state26 = 76'd33554432;
parameter    ap_ST_fsm_state27 = 76'd67108864;
parameter    ap_ST_fsm_state28 = 76'd134217728;
parameter    ap_ST_fsm_state29 = 76'd268435456;
parameter    ap_ST_fsm_state30 = 76'd536870912;
parameter    ap_ST_fsm_state31 = 76'd1073741824;
parameter    ap_ST_fsm_state32 = 76'd2147483648;
parameter    ap_ST_fsm_state33 = 76'd4294967296;
parameter    ap_ST_fsm_state34 = 76'd8589934592;
parameter    ap_ST_fsm_state35 = 76'd17179869184;
parameter    ap_ST_fsm_state36 = 76'd34359738368;
parameter    ap_ST_fsm_state37 = 76'd68719476736;
parameter    ap_ST_fsm_state38 = 76'd137438953472;
parameter    ap_ST_fsm_state39 = 76'd274877906944;
parameter    ap_ST_fsm_state40 = 76'd549755813888;
parameter    ap_ST_fsm_state41 = 76'd1099511627776;
parameter    ap_ST_fsm_state42 = 76'd2199023255552;
parameter    ap_ST_fsm_state43 = 76'd4398046511104;
parameter    ap_ST_fsm_state44 = 76'd8796093022208;
parameter    ap_ST_fsm_state45 = 76'd17592186044416;
parameter    ap_ST_fsm_state46 = 76'd35184372088832;
parameter    ap_ST_fsm_state47 = 76'd70368744177664;
parameter    ap_ST_fsm_state48 = 76'd140737488355328;
parameter    ap_ST_fsm_state49 = 76'd281474976710656;
parameter    ap_ST_fsm_state50 = 76'd562949953421312;
parameter    ap_ST_fsm_state51 = 76'd1125899906842624;
parameter    ap_ST_fsm_state52 = 76'd2251799813685248;
parameter    ap_ST_fsm_state53 = 76'd4503599627370496;
parameter    ap_ST_fsm_state54 = 76'd9007199254740992;
parameter    ap_ST_fsm_state55 = 76'd18014398509481984;
parameter    ap_ST_fsm_state56 = 76'd36028797018963968;
parameter    ap_ST_fsm_state57 = 76'd72057594037927936;
parameter    ap_ST_fsm_state58 = 76'd144115188075855872;
parameter    ap_ST_fsm_state59 = 76'd288230376151711744;
parameter    ap_ST_fsm_state60 = 76'd576460752303423488;
parameter    ap_ST_fsm_state61 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 76'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_pp0_stage0 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_pp0_stage1 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state78 = 76'd37778931862957161709568;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] i;
input  [63:0] frames;
output  [16:0] frame1_0_V_V_din;
input   frame1_0_V_V_full_n;
output   frame1_0_V_V_write;
output  [16:0] frame1_1_V_V_din;
input   frame1_1_V_V_full_n;
output   frame1_1_V_V_write;
output  [16:0] frame1_2_V_V_din;
input   frame1_2_V_V_full_n;
output   frame1_2_V_V_write;
output  [16:0] frame1_3_V_V_din;
input   frame1_3_V_V_full_n;
output   frame1_3_V_V_write;
output  [16:0] frame2_0_V_V_din;
input   frame2_0_V_V_full_n;
output   frame2_0_V_V_write;
output  [16:0] frame2_1_V_V_din;
input   frame2_1_V_V_full_n;
output   frame2_1_V_V_write;
output  [16:0] frame2_2_V_V_din;
input   frame2_2_V_V_full_n;
output   frame2_2_V_V_write;
output  [16:0] frame2_3_V_V_din;
input   frame2_3_V_V_full_n;
output   frame2_3_V_V_write;
output  [16:0] frame3a_0_V_V_din;
input   frame3a_0_V_V_full_n;
output   frame3a_0_V_V_write;
output  [16:0] frame3a_1_V_V_din;
input   frame3a_1_V_V_full_n;
output   frame3a_1_V_V_write;
output  [16:0] frame3a_2_V_V_din;
input   frame3a_2_V_V_full_n;
output   frame3a_2_V_V_write;
output  [16:0] frame3a_3_V_V_din;
input   frame3a_3_V_V_full_n;
output   frame3a_3_V_V_write;
output  [16:0] frame3b_0_V_V_din;
input   frame3b_0_V_V_full_n;
output   frame3b_0_V_V_write;
output  [16:0] frame3b_1_V_V_din;
input   frame3b_1_V_V_full_n;
output   frame3b_1_V_V_write;
output  [16:0] frame3b_2_V_V_din;
input   frame3b_2_V_V_full_n;
output   frame3b_2_V_V_write;
output  [16:0] frame3b_3_V_V_din;
input   frame3b_3_V_V_full_n;
output   frame3b_3_V_V_write;
output  [16:0] frame4_0_V_V_din;
input   frame4_0_V_V_full_n;
output   frame4_0_V_V_write;
output  [16:0] frame4_1_V_V_din;
input   frame4_1_V_V_full_n;
output   frame4_1_V_V_write;
output  [16:0] frame4_2_V_V_din;
input   frame4_2_V_V_full_n;
output   frame4_2_V_V_write;
output  [16:0] frame4_3_V_V_din;
input   frame4_3_V_V_full_n;
output   frame4_3_V_V_write;
output  [16:0] frame5_0_V_V_din;
input   frame5_0_V_V_full_n;
output   frame5_0_V_V_write;
output  [16:0] frame5_1_V_V_din;
input   frame5_1_V_V_full_n;
output   frame5_1_V_V_write;
output  [16:0] frame5_2_V_V_din;
input   frame5_2_V_V_full_n;
output   frame5_2_V_V_write;
output  [16:0] frame5_3_V_V_din;
input   frame5_3_V_V_full_n;
output   frame5_3_V_V_write;
input  [63:0] outputs;
output  [41:0] i_c_din;
input   i_c_full_n;
output   i_c_write;
output  [63:0] outputs_c_din;
input   outputs_c_full_n;
output   outputs_c_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg[16:0] frame1_0_V_V_din;
reg frame1_0_V_V_write;
reg[16:0] frame1_1_V_V_din;
reg frame1_1_V_V_write;
reg[16:0] frame1_2_V_V_din;
reg frame1_2_V_V_write;
reg[16:0] frame1_3_V_V_din;
reg frame1_3_V_V_write;
reg[16:0] frame2_0_V_V_din;
reg frame2_0_V_V_write;
reg[16:0] frame2_1_V_V_din;
reg frame2_1_V_V_write;
reg[16:0] frame2_2_V_V_din;
reg frame2_2_V_V_write;
reg[16:0] frame2_3_V_V_din;
reg frame2_3_V_V_write;
reg[16:0] frame3a_0_V_V_din;
reg frame3a_0_V_V_write;
reg[16:0] frame3a_1_V_V_din;
reg frame3a_1_V_V_write;
reg[16:0] frame3a_2_V_V_din;
reg frame3a_2_V_V_write;
reg[16:0] frame3a_3_V_V_din;
reg frame3a_3_V_V_write;
reg[16:0] frame3b_0_V_V_din;
reg frame3b_0_V_V_write;
reg[16:0] frame3b_1_V_V_din;
reg frame3b_1_V_V_write;
reg[16:0] frame3b_2_V_V_din;
reg frame3b_2_V_V_write;
reg[16:0] frame3b_3_V_V_din;
reg frame3b_3_V_V_write;
reg[16:0] frame4_0_V_V_din;
reg frame4_0_V_V_write;
reg[16:0] frame4_1_V_V_din;
reg frame4_1_V_V_write;
reg[16:0] frame4_2_V_V_din;
reg frame4_2_V_V_write;
reg[16:0] frame4_3_V_V_din;
reg frame4_3_V_V_write;
reg[16:0] frame5_0_V_V_din;
reg frame5_0_V_V_write;
reg[16:0] frame5_1_V_V_din;
reg frame5_1_V_V_write;
reg[16:0] frame5_2_V_V_din;
reg frame5_2_V_V_write;
reg[16:0] frame5_3_V_V_din;
reg frame5_3_V_V_write;
reg i_c_write;
reg outputs_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [63:0] frames_0_data_reg;
reg    frames_0_vld_reg;
reg    frames_0_ack_out;
reg   [63:0] outputs_0_data_reg;
reg    outputs_0_vld_reg;
reg    outputs_0_ack_out;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln30_reg_1131;
reg    frame1_0_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln30_reg_1131_pp0_iter1_reg;
reg    frame1_1_V_V_blk_n;
reg    frame1_2_V_V_blk_n;
reg    frame1_3_V_V_blk_n;
reg    frame2_0_V_V_blk_n;
reg    frame2_1_V_V_blk_n;
reg    frame2_2_V_V_blk_n;
reg    frame2_3_V_V_blk_n;
reg    frame3a_0_V_V_blk_n;
reg    frame3a_1_V_V_blk_n;
reg    frame3a_2_V_V_blk_n;
reg    frame3a_3_V_V_blk_n;
reg    frame3b_0_V_V_blk_n;
reg    frame3b_1_V_V_blk_n;
reg    frame3b_2_V_V_blk_n;
reg    frame3b_3_V_V_blk_n;
reg    frame4_0_V_V_blk_n;
reg    frame4_1_V_V_blk_n;
reg    frame4_2_V_V_blk_n;
reg    frame4_3_V_V_blk_n;
reg    frame5_0_V_V_blk_n;
reg    frame5_1_V_V_blk_n;
reg    frame5_2_V_V_blk_n;
reg    frame5_3_V_V_blk_n;
reg    i_c_blk_n;
wire    ap_CS_fsm_state2;
reg    outputs_c_blk_n;
reg   [16:0] i_2_reg_493;
reg   [57:0] trunc_ln_i_reg_1115;
wire   [16:0] add_ln30_fu_541_p2;
reg   [16:0] add_ln30_reg_1126;
wire    ap_block_state73_pp0_stage0_iter0;
reg    ap_block_state75_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln30_fu_547_p2;
wire   [7:0] r_V_fu_553_p1;
reg   [7:0] r_V_reg_1135;
reg    ap_block_state74_pp0_stage1_iter0;
reg    ap_block_state76_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [7:0] r_V_1_reg_1140;
reg   [7:0] r_V_2_reg_1145;
reg   [7:0] r_V_3_reg_1150;
reg   [7:0] r_V_4_reg_1155;
reg   [7:0] r_V_5_reg_1160;
reg   [7:0] r_V_6_reg_1165;
reg   [7:0] r_V_7_reg_1170;
reg   [7:0] r_V_8_reg_1175;
reg   [7:0] r_V_9_reg_1180;
reg   [7:0] r_V_10_reg_1185;
reg   [7:0] r_V_11_reg_1190;
reg   [7:0] r_V_12_reg_1195;
reg   [7:0] r_V_13_reg_1200;
reg   [7:0] r_V_14_reg_1205;
reg   [7:0] r_V_15_reg_1210;
reg   [7:0] r_V_16_reg_1215;
reg   [7:0] r_V_17_reg_1220;
reg   [7:0] r_V_18_reg_1225;
reg   [7:0] r_V_19_reg_1230;
reg   [7:0] r_V_20_reg_1235;
reg   [7:0] r_V_21_reg_1240;
reg   [7:0] r_V_22_reg_1245;
reg   [7:0] r_V_23_reg_1250;
reg   [7:0] r_V_24_reg_1255;
reg   [7:0] r_V_25_reg_1260;
reg   [7:0] r_V_26_reg_1265;
reg   [7:0] r_V_27_reg_1270;
reg   [7:0] r_V_28_reg_1275;
reg   [7:0] r_V_29_reg_1280;
reg   [7:0] r_V_30_reg_1285;
reg   [7:0] r_V_31_reg_1290;
reg   [7:0] r_V_32_reg_1295;
reg   [7:0] r_V_33_reg_1300;
reg   [7:0] r_V_34_reg_1305;
reg   [7:0] r_V_35_reg_1310;
reg   [7:0] r_V_36_reg_1315;
reg   [7:0] r_V_37_reg_1320;
reg   [7:0] r_V_38_reg_1325;
reg   [7:0] r_V_39_reg_1330;
wire    ap_CS_fsm_state72;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state73;
reg    ap_block_pp0_stage1_subdone;
reg   [16:0] ap_phi_mux_i_2_phi_fu_497_p4;
wire  signed [63:0] sext_ln30_fu_531_p1;
reg    ap_block_state2;
wire   [16:0] zext_ln1333_fu_947_p1;
reg    ap_block_pp0_stage0_01001;
wire   [16:0] zext_ln1333_20_fu_1031_p1;
reg    ap_block_pp0_stage1_01001;
wire   [16:0] zext_ln1333_1_fu_951_p1;
wire   [16:0] zext_ln1333_21_fu_1035_p1;
wire   [16:0] zext_ln1333_2_fu_955_p1;
wire   [16:0] zext_ln1333_22_fu_1039_p1;
wire   [16:0] zext_ln1333_3_fu_960_p1;
wire   [16:0] zext_ln1333_23_fu_1044_p1;
wire   [16:0] zext_ln1333_4_fu_964_p1;
wire   [16:0] zext_ln1333_24_fu_1048_p1;
wire   [16:0] zext_ln1333_5_fu_968_p1;
wire   [16:0] zext_ln1333_25_fu_1052_p1;
wire   [16:0] zext_ln1333_6_fu_972_p1;
wire   [16:0] zext_ln1333_26_fu_1056_p1;
wire   [16:0] zext_ln1333_7_fu_976_p1;
wire   [16:0] zext_ln1333_27_fu_1060_p1;
wire   [16:0] zext_ln1333_8_fu_981_p1;
wire   [16:0] zext_ln1333_28_fu_1065_p1;
wire   [16:0] zext_ln1333_9_fu_985_p1;
wire   [16:0] zext_ln1333_29_fu_1069_p1;
wire   [16:0] zext_ln1333_10_fu_989_p1;
wire   [16:0] zext_ln1333_30_fu_1073_p1;
wire   [16:0] zext_ln1333_11_fu_993_p1;
wire   [16:0] zext_ln1333_31_fu_1077_p1;
wire   [16:0] zext_ln1333_12_fu_997_p1;
wire   [16:0] zext_ln1333_32_fu_1081_p1;
wire   [16:0] zext_ln1333_13_fu_1002_p1;
wire   [16:0] zext_ln1333_33_fu_1086_p1;
wire   [16:0] zext_ln1333_14_fu_1006_p1;
wire   [16:0] zext_ln1333_34_fu_1090_p1;
wire   [16:0] zext_ln1333_15_fu_1010_p1;
wire   [16:0] zext_ln1333_35_fu_1094_p1;
wire   [16:0] zext_ln1333_16_fu_1014_p1;
wire   [16:0] zext_ln1333_36_fu_1098_p1;
wire   [16:0] zext_ln1333_17_fu_1018_p1;
wire   [16:0] zext_ln1333_37_fu_1102_p1;
wire   [16:0] zext_ln1333_18_fu_1023_p1;
wire   [16:0] zext_ln1333_38_fu_1107_p1;
wire   [16:0] zext_ln1333_19_fu_1027_p1;
wire   [16:0] zext_ln1333_39_fu_1111_p1;
wire   [63:0] shl_ln538_fu_509_p2;
wire   [63:0] wide_frames_fu_515_p2;
wire    ap_CS_fsm_state78;
reg   [75:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1509;
reg    ap_condition_1513;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 76'd1;
#0 frames_0_data_reg = 64'd0;
#0 frames_0_vld_reg = 1'b0;
#0 outputs_0_data_reg = 64'd0;
#0 outputs_0_vld_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    ap_CS_fsm <= ap_NS_fsm;
end

always @ (posedge ap_clk) begin
    if ((ap_continue == 1'b1)) begin
        ap_done_reg <= 1'b0;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        ap_done_reg <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state73) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        ap_enable_reg_pp0_iter0 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_493 <= add_ln30_reg_1126;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        i_2_reg_493 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
        start_once_reg <= 1'b1;
    end else if ((internal_ap_ready == 1'b1)) begin
        start_once_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln30_reg_1126 <= add_ln30_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (frames_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (frames_0_vld_reg == 1'b1)) | (~((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (frames_0_vld_reg == 1'b0)))) begin
        frames_0_data_reg <= frames;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln30_reg_1131 <= icmp_ln30_fu_547_p2;
        icmp_ln30_reg_1131_pp0_iter1_reg <= icmp_ln30_reg_1131;
    end
end

always @ (posedge ap_clk) begin
    if (((~((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (outputs_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (outputs_0_vld_reg == 1'b1)) | (~((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (outputs_0_vld_reg == 1'b0)))) begin
        outputs_0_data_reg <= outputs;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        r_V_10_reg_1185 <= {{m_axi_gmem_RDATA[135:128]}};
        r_V_11_reg_1190 <= {{m_axi_gmem_RDATA[143:136]}};
        r_V_12_reg_1195 <= {{m_axi_gmem_RDATA[151:144]}};
        r_V_13_reg_1200 <= {{m_axi_gmem_RDATA[159:152]}};
        r_V_14_reg_1205 <= {{m_axi_gmem_RDATA[167:160]}};
        r_V_15_reg_1210 <= {{m_axi_gmem_RDATA[199:192]}};
        r_V_16_reg_1215 <= {{m_axi_gmem_RDATA[207:200]}};
        r_V_17_reg_1220 <= {{m_axi_gmem_RDATA[215:208]}};
        r_V_18_reg_1225 <= {{m_axi_gmem_RDATA[223:216]}};
        r_V_19_reg_1230 <= {{m_axi_gmem_RDATA[231:224]}};
        r_V_1_reg_1140 <= {{m_axi_gmem_RDATA[15:8]}};
        r_V_20_reg_1235 <= {{m_axi_gmem_RDATA[263:256]}};
        r_V_21_reg_1240 <= {{m_axi_gmem_RDATA[271:264]}};
        r_V_22_reg_1245 <= {{m_axi_gmem_RDATA[279:272]}};
        r_V_23_reg_1250 <= {{m_axi_gmem_RDATA[287:280]}};
        r_V_24_reg_1255 <= {{m_axi_gmem_RDATA[295:288]}};
        r_V_25_reg_1260 <= {{m_axi_gmem_RDATA[327:320]}};
        r_V_26_reg_1265 <= {{m_axi_gmem_RDATA[335:328]}};
        r_V_27_reg_1270 <= {{m_axi_gmem_RDATA[343:336]}};
        r_V_28_reg_1275 <= {{m_axi_gmem_RDATA[351:344]}};
        r_V_29_reg_1280 <= {{m_axi_gmem_RDATA[359:352]}};
        r_V_2_reg_1145 <= {{m_axi_gmem_RDATA[23:16]}};
        r_V_30_reg_1285 <= {{m_axi_gmem_RDATA[391:384]}};
        r_V_31_reg_1290 <= {{m_axi_gmem_RDATA[399:392]}};
        r_V_32_reg_1295 <= {{m_axi_gmem_RDATA[407:400]}};
        r_V_33_reg_1300 <= {{m_axi_gmem_RDATA[415:408]}};
        r_V_34_reg_1305 <= {{m_axi_gmem_RDATA[423:416]}};
        r_V_35_reg_1310 <= {{m_axi_gmem_RDATA[455:448]}};
        r_V_36_reg_1315 <= {{m_axi_gmem_RDATA[463:456]}};
        r_V_37_reg_1320 <= {{m_axi_gmem_RDATA[471:464]}};
        r_V_38_reg_1325 <= {{m_axi_gmem_RDATA[479:472]}};
        r_V_39_reg_1330 <= {{m_axi_gmem_RDATA[487:480]}};
        r_V_3_reg_1150 <= {{m_axi_gmem_RDATA[31:24]}};
        r_V_4_reg_1155 <= {{m_axi_gmem_RDATA[39:32]}};
        r_V_5_reg_1160 <= {{m_axi_gmem_RDATA[71:64]}};
        r_V_6_reg_1165 <= {{m_axi_gmem_RDATA[79:72]}};
        r_V_7_reg_1170 <= {{m_axi_gmem_RDATA[87:80]}};
        r_V_8_reg_1175 <= {{m_axi_gmem_RDATA[95:88]}};
        r_V_9_reg_1180 <= {{m_axi_gmem_RDATA[103:96]}};
        r_V_reg_1135 <= r_V_fu_553_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln_i_reg_1115 <= {{wide_frames_fu_515_p2[63:6]}};
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_547_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state73 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state73 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_2_phi_fu_497_p4 = add_ln30_reg_1126;
    end else begin
        ap_phi_mux_i_2_phi_fu_497_p4 = i_2_reg_493;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame1_0_V_V_blk_n = frame1_0_V_V_full_n;
    end else begin
        frame1_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame1_0_V_V_din = zext_ln1333_20_fu_1031_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame1_0_V_V_din = zext_ln1333_fu_947_p1;
        end else begin
            frame1_0_V_V_din = 'bx;
        end
    end else begin
        frame1_0_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame1_0_V_V_write = 1'b1;
    end else begin
        frame1_0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame1_1_V_V_blk_n = frame1_1_V_V_full_n;
    end else begin
        frame1_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame1_1_V_V_din = zext_ln1333_25_fu_1052_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame1_1_V_V_din = zext_ln1333_5_fu_968_p1;
        end else begin
            frame1_1_V_V_din = 'bx;
        end
    end else begin
        frame1_1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame1_1_V_V_write = 1'b1;
    end else begin
        frame1_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame1_2_V_V_blk_n = frame1_2_V_V_full_n;
    end else begin
        frame1_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame1_2_V_V_din = zext_ln1333_30_fu_1073_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame1_2_V_V_din = zext_ln1333_10_fu_989_p1;
        end else begin
            frame1_2_V_V_din = 'bx;
        end
    end else begin
        frame1_2_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame1_2_V_V_write = 1'b1;
    end else begin
        frame1_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame1_3_V_V_blk_n = frame1_3_V_V_full_n;
    end else begin
        frame1_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame1_3_V_V_din = zext_ln1333_35_fu_1094_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame1_3_V_V_din = zext_ln1333_15_fu_1010_p1;
        end else begin
            frame1_3_V_V_din = 'bx;
        end
    end else begin
        frame1_3_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame1_3_V_V_write = 1'b1;
    end else begin
        frame1_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame2_0_V_V_blk_n = frame2_0_V_V_full_n;
    end else begin
        frame2_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame2_0_V_V_din = zext_ln1333_21_fu_1035_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame2_0_V_V_din = zext_ln1333_1_fu_951_p1;
        end else begin
            frame2_0_V_V_din = 'bx;
        end
    end else begin
        frame2_0_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame2_0_V_V_write = 1'b1;
    end else begin
        frame2_0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame2_1_V_V_blk_n = frame2_1_V_V_full_n;
    end else begin
        frame2_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame2_1_V_V_din = zext_ln1333_26_fu_1056_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame2_1_V_V_din = zext_ln1333_6_fu_972_p1;
        end else begin
            frame2_1_V_V_din = 'bx;
        end
    end else begin
        frame2_1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame2_1_V_V_write = 1'b1;
    end else begin
        frame2_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame2_2_V_V_blk_n = frame2_2_V_V_full_n;
    end else begin
        frame2_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame2_2_V_V_din = zext_ln1333_31_fu_1077_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame2_2_V_V_din = zext_ln1333_11_fu_993_p1;
        end else begin
            frame2_2_V_V_din = 'bx;
        end
    end else begin
        frame2_2_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame2_2_V_V_write = 1'b1;
    end else begin
        frame2_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame2_3_V_V_blk_n = frame2_3_V_V_full_n;
    end else begin
        frame2_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame2_3_V_V_din = zext_ln1333_36_fu_1098_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame2_3_V_V_din = zext_ln1333_16_fu_1014_p1;
        end else begin
            frame2_3_V_V_din = 'bx;
        end
    end else begin
        frame2_3_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame2_3_V_V_write = 1'b1;
    end else begin
        frame2_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3a_0_V_V_blk_n = frame3a_0_V_V_full_n;
    end else begin
        frame3a_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame3a_0_V_V_din = zext_ln1333_22_fu_1039_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame3a_0_V_V_din = zext_ln1333_2_fu_955_p1;
        end else begin
            frame3a_0_V_V_din = 'bx;
        end
    end else begin
        frame3a_0_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3a_0_V_V_write = 1'b1;
    end else begin
        frame3a_0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3a_1_V_V_blk_n = frame3a_1_V_V_full_n;
    end else begin
        frame3a_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame3a_1_V_V_din = zext_ln1333_27_fu_1060_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame3a_1_V_V_din = zext_ln1333_7_fu_976_p1;
        end else begin
            frame3a_1_V_V_din = 'bx;
        end
    end else begin
        frame3a_1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3a_1_V_V_write = 1'b1;
    end else begin
        frame3a_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3a_2_V_V_blk_n = frame3a_2_V_V_full_n;
    end else begin
        frame3a_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame3a_2_V_V_din = zext_ln1333_32_fu_1081_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame3a_2_V_V_din = zext_ln1333_12_fu_997_p1;
        end else begin
            frame3a_2_V_V_din = 'bx;
        end
    end else begin
        frame3a_2_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3a_2_V_V_write = 1'b1;
    end else begin
        frame3a_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3a_3_V_V_blk_n = frame3a_3_V_V_full_n;
    end else begin
        frame3a_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame3a_3_V_V_din = zext_ln1333_37_fu_1102_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame3a_3_V_V_din = zext_ln1333_17_fu_1018_p1;
        end else begin
            frame3a_3_V_V_din = 'bx;
        end
    end else begin
        frame3a_3_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3a_3_V_V_write = 1'b1;
    end else begin
        frame3a_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3b_0_V_V_blk_n = frame3b_0_V_V_full_n;
    end else begin
        frame3b_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame3b_0_V_V_din = zext_ln1333_22_fu_1039_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame3b_0_V_V_din = zext_ln1333_2_fu_955_p1;
        end else begin
            frame3b_0_V_V_din = 'bx;
        end
    end else begin
        frame3b_0_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3b_0_V_V_write = 1'b1;
    end else begin
        frame3b_0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3b_1_V_V_blk_n = frame3b_1_V_V_full_n;
    end else begin
        frame3b_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame3b_1_V_V_din = zext_ln1333_27_fu_1060_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame3b_1_V_V_din = zext_ln1333_7_fu_976_p1;
        end else begin
            frame3b_1_V_V_din = 'bx;
        end
    end else begin
        frame3b_1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3b_1_V_V_write = 1'b1;
    end else begin
        frame3b_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3b_2_V_V_blk_n = frame3b_2_V_V_full_n;
    end else begin
        frame3b_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame3b_2_V_V_din = zext_ln1333_32_fu_1081_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame3b_2_V_V_din = zext_ln1333_12_fu_997_p1;
        end else begin
            frame3b_2_V_V_din = 'bx;
        end
    end else begin
        frame3b_2_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3b_2_V_V_write = 1'b1;
    end else begin
        frame3b_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3b_3_V_V_blk_n = frame3b_3_V_V_full_n;
    end else begin
        frame3b_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame3b_3_V_V_din = zext_ln1333_37_fu_1102_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame3b_3_V_V_din = zext_ln1333_17_fu_1018_p1;
        end else begin
            frame3b_3_V_V_din = 'bx;
        end
    end else begin
        frame3b_3_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame3b_3_V_V_write = 1'b1;
    end else begin
        frame3b_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame4_0_V_V_blk_n = frame4_0_V_V_full_n;
    end else begin
        frame4_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame4_0_V_V_din = zext_ln1333_23_fu_1044_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame4_0_V_V_din = zext_ln1333_3_fu_960_p1;
        end else begin
            frame4_0_V_V_din = 'bx;
        end
    end else begin
        frame4_0_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame4_0_V_V_write = 1'b1;
    end else begin
        frame4_0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame4_1_V_V_blk_n = frame4_1_V_V_full_n;
    end else begin
        frame4_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame4_1_V_V_din = zext_ln1333_28_fu_1065_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame4_1_V_V_din = zext_ln1333_8_fu_981_p1;
        end else begin
            frame4_1_V_V_din = 'bx;
        end
    end else begin
        frame4_1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame4_1_V_V_write = 1'b1;
    end else begin
        frame4_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame4_2_V_V_blk_n = frame4_2_V_V_full_n;
    end else begin
        frame4_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame4_2_V_V_din = zext_ln1333_33_fu_1086_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame4_2_V_V_din = zext_ln1333_13_fu_1002_p1;
        end else begin
            frame4_2_V_V_din = 'bx;
        end
    end else begin
        frame4_2_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame4_2_V_V_write = 1'b1;
    end else begin
        frame4_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame4_3_V_V_blk_n = frame4_3_V_V_full_n;
    end else begin
        frame4_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame4_3_V_V_din = zext_ln1333_38_fu_1107_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame4_3_V_V_din = zext_ln1333_18_fu_1023_p1;
        end else begin
            frame4_3_V_V_din = 'bx;
        end
    end else begin
        frame4_3_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame4_3_V_V_write = 1'b1;
    end else begin
        frame4_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame5_0_V_V_blk_n = frame5_0_V_V_full_n;
    end else begin
        frame5_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame5_0_V_V_din = zext_ln1333_24_fu_1048_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame5_0_V_V_din = zext_ln1333_4_fu_964_p1;
        end else begin
            frame5_0_V_V_din = 'bx;
        end
    end else begin
        frame5_0_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame5_0_V_V_write = 1'b1;
    end else begin
        frame5_0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame5_1_V_V_blk_n = frame5_1_V_V_full_n;
    end else begin
        frame5_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame5_1_V_V_din = zext_ln1333_29_fu_1069_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame5_1_V_V_din = zext_ln1333_9_fu_985_p1;
        end else begin
            frame5_1_V_V_din = 'bx;
        end
    end else begin
        frame5_1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame5_1_V_V_write = 1'b1;
    end else begin
        frame5_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame5_2_V_V_blk_n = frame5_2_V_V_full_n;
    end else begin
        frame5_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame5_2_V_V_din = zext_ln1333_34_fu_1090_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame5_2_V_V_din = zext_ln1333_14_fu_1006_p1;
        end else begin
            frame5_2_V_V_din = 'bx;
        end
    end else begin
        frame5_2_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame5_2_V_V_write = 1'b1;
    end else begin
        frame5_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame5_3_V_V_blk_n = frame5_3_V_V_full_n;
    end else begin
        frame5_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1513)) begin
            frame5_3_V_V_din = zext_ln1333_39_fu_1111_p1;
        end else if ((1'b1 == ap_condition_1509)) begin
            frame5_3_V_V_din = zext_ln1333_19_fu_1027_p1;
        end else begin
            frame5_3_V_V_din = 'bx;
        end
    end else begin
        frame5_3_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frame5_3_V_V_write = 1'b1;
    end else begin
        frame5_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (~((outputs_c_full_n == 1'b0) | (i_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        frames_0_ack_out = 1'b1;
    end else begin
        frames_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_c_blk_n = i_c_full_n;
    end else begin
        i_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outputs_c_full_n == 1'b0) | (i_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_c_write = 1'b1;
    end else begin
        i_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem_ARREADY == 1'b1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (~((outputs_c_full_n == 1'b0) | (i_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        outputs_0_ack_out = 1'b1;
    end else begin
        outputs_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        outputs_c_blk_n = outputs_c_full_n;
    end else begin
        outputs_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outputs_c_full_n == 1'b0) | (i_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        outputs_c_write = 1'b1;
    end else begin
        outputs_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((outputs_c_full_n == 1'b0) | (i_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln30_fu_547_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln30_fu_547_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_fu_541_p2 = (ap_phi_mux_i_2_phi_fu_497_p4 + 17'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd75];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln30_reg_1131 == 1'd0) & (frame5_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame5_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame5_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame5_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_0_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln30_reg_1131 == 1'd0) & (frame5_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame5_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame5_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame5_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_0_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln30_reg_1131 == 1'd0) & (frame5_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame5_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame5_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame5_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_0_V_V_full_n == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_0_V_V_full_n == 1'b0)))) | ((icmp_ln30_reg_1131 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_0_V_V_full_n == 1'b0)))) | ((icmp_ln30_reg_1131 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_0_V_V_full_n == 1'b0)))) | ((icmp_ln30_reg_1131 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((outputs_c_full_n == 1'b0) | (i_c_full_n == 1'b0));
end

assign ap_block_state73_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state74_pp0_stage1_iter0 = ((icmp_ln30_reg_1131 == 1'd0) & (m_axi_gmem_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state75_pp0_stage0_iter1 = (((icmp_ln30_reg_1131 == 1'd0) & (frame5_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame5_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame5_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame5_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame4_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3b_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame3a_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame2_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131 == 1'd0) & (frame1_0_V_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state76_pp0_stage1_iter1 = (((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_3_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_2_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_1_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame5_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame4_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3b_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame3a_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame2_0_V_V_full_n == 1'b0)) | ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (frame1_0_V_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_1509 = ((icmp_ln30_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_1513 = ((icmp_ln30_reg_1131_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_c_din = i[41:0];

assign icmp_ln30_fu_547_p2 = ((ap_phi_mux_i_2_phi_fu_497_p4 == 17'd65536) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = sext_ln30_fu_531_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd65536;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 512'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign outputs_c_din = outputs_0_data_reg;

assign r_V_fu_553_p1 = m_axi_gmem_RDATA[7:0];

assign sext_ln30_fu_531_p1 = $signed(trunc_ln_i_reg_1115);

assign shl_ln538_fu_509_p2 = i << 64'd22;

assign start_out = real_start;

assign wide_frames_fu_515_p2 = (shl_ln538_fu_509_p2 + frames_0_data_reg);

assign zext_ln1333_10_fu_989_p1 = r_V_10_reg_1185;

assign zext_ln1333_11_fu_993_p1 = r_V_11_reg_1190;

assign zext_ln1333_12_fu_997_p1 = r_V_12_reg_1195;

assign zext_ln1333_13_fu_1002_p1 = r_V_13_reg_1200;

assign zext_ln1333_14_fu_1006_p1 = r_V_14_reg_1205;

assign zext_ln1333_15_fu_1010_p1 = r_V_15_reg_1210;

assign zext_ln1333_16_fu_1014_p1 = r_V_16_reg_1215;

assign zext_ln1333_17_fu_1018_p1 = r_V_17_reg_1220;

assign zext_ln1333_18_fu_1023_p1 = r_V_18_reg_1225;

assign zext_ln1333_19_fu_1027_p1 = r_V_19_reg_1230;

assign zext_ln1333_1_fu_951_p1 = r_V_1_reg_1140;

assign zext_ln1333_20_fu_1031_p1 = r_V_20_reg_1235;

assign zext_ln1333_21_fu_1035_p1 = r_V_21_reg_1240;

assign zext_ln1333_22_fu_1039_p1 = r_V_22_reg_1245;

assign zext_ln1333_23_fu_1044_p1 = r_V_23_reg_1250;

assign zext_ln1333_24_fu_1048_p1 = r_V_24_reg_1255;

assign zext_ln1333_25_fu_1052_p1 = r_V_25_reg_1260;

assign zext_ln1333_26_fu_1056_p1 = r_V_26_reg_1265;

assign zext_ln1333_27_fu_1060_p1 = r_V_27_reg_1270;

assign zext_ln1333_28_fu_1065_p1 = r_V_28_reg_1275;

assign zext_ln1333_29_fu_1069_p1 = r_V_29_reg_1280;

assign zext_ln1333_2_fu_955_p1 = r_V_2_reg_1145;

assign zext_ln1333_30_fu_1073_p1 = r_V_30_reg_1285;

assign zext_ln1333_31_fu_1077_p1 = r_V_31_reg_1290;

assign zext_ln1333_32_fu_1081_p1 = r_V_32_reg_1295;

assign zext_ln1333_33_fu_1086_p1 = r_V_33_reg_1300;

assign zext_ln1333_34_fu_1090_p1 = r_V_34_reg_1305;

assign zext_ln1333_35_fu_1094_p1 = r_V_35_reg_1310;

assign zext_ln1333_36_fu_1098_p1 = r_V_36_reg_1315;

assign zext_ln1333_37_fu_1102_p1 = r_V_37_reg_1320;

assign zext_ln1333_38_fu_1107_p1 = r_V_38_reg_1325;

assign zext_ln1333_39_fu_1111_p1 = r_V_39_reg_1330;

assign zext_ln1333_3_fu_960_p1 = r_V_3_reg_1150;

assign zext_ln1333_4_fu_964_p1 = r_V_4_reg_1155;

assign zext_ln1333_5_fu_968_p1 = r_V_5_reg_1160;

assign zext_ln1333_6_fu_972_p1 = r_V_6_reg_1165;

assign zext_ln1333_7_fu_976_p1 = r_V_7_reg_1170;

assign zext_ln1333_8_fu_981_p1 = r_V_8_reg_1175;

assign zext_ln1333_9_fu_985_p1 = r_V_9_reg_1180;

assign zext_ln1333_fu_947_p1 = r_V_reg_1135;

always @ (posedge ap_clk) begin
    frames_0_vld_reg <= 1'b0;
    outputs_0_vld_reg <= 1'b0;
end

endmodule //optical_flow_read_frames123
