// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module optical_flow_write_outputs (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        velocity_V_0_dout,
        velocity_V_0_empty_n,
        velocity_V_0_read,
        velocity_V_1_dout,
        velocity_V_1_empty_n,
        velocity_V_1_read,
        velocity_V_2_dout,
        velocity_V_2_empty_n,
        velocity_V_2_read,
        velocity_V_3_dout,
        velocity_V_3_empty_n,
        velocity_V_3_read,
        i_dout,
        i_empty_n,
        i_read,
        outputs_dout,
        outputs_empty_n,
        outputs_read
);

parameter    ap_ST_fsm_state1 = 73'd1;
parameter    ap_ST_fsm_state2 = 73'd2;
parameter    ap_ST_fsm_state3 = 73'd4;
parameter    ap_ST_fsm_pp0_stage0 = 73'd8;
parameter    ap_ST_fsm_pp0_stage1 = 73'd16;
parameter    ap_ST_fsm_state8 = 73'd32;
parameter    ap_ST_fsm_state9 = 73'd64;
parameter    ap_ST_fsm_state10 = 73'd128;
parameter    ap_ST_fsm_state11 = 73'd256;
parameter    ap_ST_fsm_state12 = 73'd512;
parameter    ap_ST_fsm_state13 = 73'd1024;
parameter    ap_ST_fsm_state14 = 73'd2048;
parameter    ap_ST_fsm_state15 = 73'd4096;
parameter    ap_ST_fsm_state16 = 73'd8192;
parameter    ap_ST_fsm_state17 = 73'd16384;
parameter    ap_ST_fsm_state18 = 73'd32768;
parameter    ap_ST_fsm_state19 = 73'd65536;
parameter    ap_ST_fsm_state20 = 73'd131072;
parameter    ap_ST_fsm_state21 = 73'd262144;
parameter    ap_ST_fsm_state22 = 73'd524288;
parameter    ap_ST_fsm_state23 = 73'd1048576;
parameter    ap_ST_fsm_state24 = 73'd2097152;
parameter    ap_ST_fsm_state25 = 73'd4194304;
parameter    ap_ST_fsm_state26 = 73'd8388608;
parameter    ap_ST_fsm_state27 = 73'd16777216;
parameter    ap_ST_fsm_state28 = 73'd33554432;
parameter    ap_ST_fsm_state29 = 73'd67108864;
parameter    ap_ST_fsm_state30 = 73'd134217728;
parameter    ap_ST_fsm_state31 = 73'd268435456;
parameter    ap_ST_fsm_state32 = 73'd536870912;
parameter    ap_ST_fsm_state33 = 73'd1073741824;
parameter    ap_ST_fsm_state34 = 73'd2147483648;
parameter    ap_ST_fsm_state35 = 73'd4294967296;
parameter    ap_ST_fsm_state36 = 73'd8589934592;
parameter    ap_ST_fsm_state37 = 73'd17179869184;
parameter    ap_ST_fsm_state38 = 73'd34359738368;
parameter    ap_ST_fsm_state39 = 73'd68719476736;
parameter    ap_ST_fsm_state40 = 73'd137438953472;
parameter    ap_ST_fsm_state41 = 73'd274877906944;
parameter    ap_ST_fsm_state42 = 73'd549755813888;
parameter    ap_ST_fsm_state43 = 73'd1099511627776;
parameter    ap_ST_fsm_state44 = 73'd2199023255552;
parameter    ap_ST_fsm_state45 = 73'd4398046511104;
parameter    ap_ST_fsm_state46 = 73'd8796093022208;
parameter    ap_ST_fsm_state47 = 73'd17592186044416;
parameter    ap_ST_fsm_state48 = 73'd35184372088832;
parameter    ap_ST_fsm_state49 = 73'd70368744177664;
parameter    ap_ST_fsm_state50 = 73'd140737488355328;
parameter    ap_ST_fsm_state51 = 73'd281474976710656;
parameter    ap_ST_fsm_state52 = 73'd562949953421312;
parameter    ap_ST_fsm_state53 = 73'd1125899906842624;
parameter    ap_ST_fsm_state54 = 73'd2251799813685248;
parameter    ap_ST_fsm_state55 = 73'd4503599627370496;
parameter    ap_ST_fsm_state56 = 73'd9007199254740992;
parameter    ap_ST_fsm_state57 = 73'd18014398509481984;
parameter    ap_ST_fsm_state58 = 73'd36028797018963968;
parameter    ap_ST_fsm_state59 = 73'd72057594037927936;
parameter    ap_ST_fsm_state60 = 73'd144115188075855872;
parameter    ap_ST_fsm_state61 = 73'd288230376151711744;
parameter    ap_ST_fsm_state62 = 73'd576460752303423488;
parameter    ap_ST_fsm_state63 = 73'd1152921504606846976;
parameter    ap_ST_fsm_state64 = 73'd2305843009213693952;
parameter    ap_ST_fsm_state65 = 73'd4611686018427387904;
parameter    ap_ST_fsm_state66 = 73'd9223372036854775808;
parameter    ap_ST_fsm_state67 = 73'd18446744073709551616;
parameter    ap_ST_fsm_state68 = 73'd36893488147419103232;
parameter    ap_ST_fsm_state69 = 73'd73786976294838206464;
parameter    ap_ST_fsm_state70 = 73'd147573952589676412928;
parameter    ap_ST_fsm_state71 = 73'd295147905179352825856;
parameter    ap_ST_fsm_state72 = 73'd590295810358705651712;
parameter    ap_ST_fsm_state73 = 73'd1180591620717411303424;
parameter    ap_ST_fsm_state74 = 73'd2361183241434822606848;
parameter    ap_ST_fsm_state75 = 73'd4722366482869645213696;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] velocity_V_0_dout;
input   velocity_V_0_empty_n;
output   velocity_V_0_read;
input  [63:0] velocity_V_1_dout;
input   velocity_V_1_empty_n;
output   velocity_V_1_read;
input  [63:0] velocity_V_2_dout;
input   velocity_V_2_empty_n;
output   velocity_V_2_read;
input  [63:0] velocity_V_3_dout;
input   velocity_V_3_empty_n;
output   velocity_V_3_read;
input  [41:0] i_dout;
input   i_empty_n;
output   i_read;
input  [63:0] outputs_dout;
input   outputs_empty_n;
output   outputs_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_BREADY;
reg velocity_V_0_read;
reg velocity_V_1_read;
reg velocity_V_2_read;
reg velocity_V_3_read;
reg i_read;
reg outputs_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [72:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln513_reg_234;
reg   [0:0] icmp_ln513_reg_234_pp0_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state75;
reg    velocity_V_0_blk_n;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    velocity_V_1_blk_n;
reg    velocity_V_2_blk_n;
reg    velocity_V_3_blk_n;
reg    i_blk_n;
reg    outputs_blk_n;
reg   [16:0] i_1_reg_140;
reg   [41:0] i_read_reg_208;
reg   [63:0] outputs_read_reg_213;
reg   [57:0] trunc_ln_reg_218;
wire    ap_CS_fsm_state2;
wire   [16:0] add_ln513_fu_183_p2;
reg   [16:0] add_ln513_reg_229;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln513_fu_189_p2;
reg   [63:0] velocity_V_0_read_reg_238;
reg    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] velocity_V_1_read_reg_243;
reg   [63:0] velocity_V_2_read_reg_248;
reg   [63:0] velocity_V_3_read_reg_253;
reg   [63:0] velocity_V_0_read_1_reg_258;
reg   [63:0] velocity_V_1_read_1_reg_263;
reg   [63:0] velocity_V_2_read_1_reg_268;
reg   [63:0] velocity_V_3_read_1_reg_273;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_block_pp0_stage1_subdone;
reg   [16:0] ap_phi_mux_i_1_phi_fu_144_p4;
wire  signed [63:0] sext_ln513_fu_173_p1;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_state1;
wire   [63:0] shl_ln_fu_151_p3;
wire   [63:0] wide_outputs_fu_158_p2;
reg   [72:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 73'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    ap_CS_fsm <= ap_NS_fsm;
end

always @ (posedge ap_clk) begin
    if ((ap_continue == 1'b1)) begin
        ap_done_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem_BVALID == 1'b1))) begin
        ap_done_reg <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_enable_reg_pp0_iter0 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
    end else if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_1_reg_140 <= add_ln513_reg_229;
    end else if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_140 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln513_reg_229 <= add_ln513_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        i_read_reg_208 <= i_dout;
        outputs_read_reg_213 <= outputs_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln513_reg_234 <= icmp_ln513_fu_189_p2;
        icmp_ln513_reg_234_pp0_iter1_reg <= icmp_ln513_reg_234;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln_reg_218 <= {{wide_outputs_fu_158_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        velocity_V_0_read_1_reg_258 <= velocity_V_0_dout;
        velocity_V_1_read_1_reg_263 <= velocity_V_1_dout;
        velocity_V_2_read_1_reg_268 <= velocity_V_2_dout;
        velocity_V_3_read_1_reg_273 <= velocity_V_3_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        velocity_V_0_read_reg_238 <= velocity_V_0_dout;
        velocity_V_1_read_reg_243 <= velocity_V_1_dout;
        velocity_V_2_read_reg_248 <= velocity_V_2_dout;
        velocity_V_3_read_reg_253 <= velocity_V_3_dout;
    end
end

always @ (*) begin
    if ((icmp_ln513_fu_189_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_1_phi_fu_144_p4 = add_ln513_reg_229;
    end else begin
        ap_phi_mux_i_1_phi_fu_144_p4 = i_1_reg_140;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln513_reg_234_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_blk_n = i_empty_n;
    end else begin
        i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (outputs_empty_n == 1'b0) | (i_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_read = 1'b1;
    end else begin
        i_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem_BVALID == 1'b1))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln513_reg_234_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_blk_n = outputs_empty_n;
    end else begin
        outputs_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (outputs_empty_n == 1'b0) | (i_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_read = 1'b1;
    end else begin
        outputs_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage1)))) begin
        velocity_V_0_blk_n = velocity_V_0_empty_n;
    end else begin
        velocity_V_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        velocity_V_0_read = 1'b1;
    end else begin
        velocity_V_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage1)))) begin
        velocity_V_1_blk_n = velocity_V_1_empty_n;
    end else begin
        velocity_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        velocity_V_1_read = 1'b1;
    end else begin
        velocity_V_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage1)))) begin
        velocity_V_2_blk_n = velocity_V_2_empty_n;
    end else begin
        velocity_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        velocity_V_2_read = 1'b1;
    end else begin
        velocity_V_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage1)))) begin
        velocity_V_3_blk_n = velocity_V_3_empty_n;
    end else begin
        velocity_V_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln513_reg_234 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        velocity_V_3_read = 1'b1;
    end else begin
        velocity_V_3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (outputs_empty_n == 1'b0) | (i_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln513_fu_189_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln513_fu_189_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln513_fu_183_p2 = (ap_phi_mux_i_1_phi_fu_144_p4 + 17'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd72];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln513_reg_234 == 1'd0) & (velocity_V_3_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_2_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_1_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_0_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln513_reg_234 == 1'd0) & (velocity_V_3_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_2_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_1_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_0_empty_n == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln513_reg_234 == 1'd0) & (velocity_V_3_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_2_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_1_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_0_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln513_reg_234 == 1'd0) & (velocity_V_3_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_2_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_1_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_0_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln513_reg_234 == 1'd0) & (velocity_V_3_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_2_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_1_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_0_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (outputs_empty_n == 1'b0) | (i_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter0 = (((icmp_ln513_reg_234 == 1'd0) & (velocity_V_3_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_2_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_1_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_0_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = (((icmp_ln513_reg_234 == 1'd0) & (velocity_V_3_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_2_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_1_empty_n == 1'b0)) | ((icmp_ln513_reg_234 == 1'd0) & (velocity_V_0_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state7_io = ((icmp_ln513_reg_234_pp0_iter1_reg == 1'd0) & (m_axi_gmem_WREADY == 1'b0));
end

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln513_fu_189_p2 = ((ap_phi_mux_i_1_phi_fu_144_p4 == 17'd65536) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = sext_ln513_fu_173_p1;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd65536;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = {{{{{{{{velocity_V_3_read_1_reg_273}, {velocity_V_2_read_1_reg_268}}, {velocity_V_1_read_1_reg_263}}, {velocity_V_0_read_1_reg_258}}, {velocity_V_3_read_reg_253}}, {velocity_V_2_read_reg_248}}, {velocity_V_1_read_reg_243}}, {velocity_V_0_read_reg_238}};

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd18446744073709551615;

assign m_axi_gmem_WUSER = 1'd0;

assign sext_ln513_fu_173_p1 = $signed(trunc_ln_reg_218);

assign shl_ln_fu_151_p3 = {{i_read_reg_208}, {22'd0}};

assign wide_outputs_fu_158_p2 = (outputs_read_reg_213 + shl_ln_fu_151_p3);

endmodule //optical_flow_write_outputs
