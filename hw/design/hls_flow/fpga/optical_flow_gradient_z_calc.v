// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module optical_flow_gradient_z_calc (
        ap_clk,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        frame1_V_V_dout,
        frame1_V_V_empty_n,
        frame1_V_V_read,
        frame1_1_V_V_dout,
        frame1_1_V_V_empty_n,
        frame1_1_V_V_read,
        frame1_2_V_V_dout,
        frame1_2_V_V_empty_n,
        frame1_2_V_V_read,
        frame1_3_V_V_dout,
        frame1_3_V_V_empty_n,
        frame1_3_V_V_read,
        frame2_V_V_dout,
        frame2_V_V_empty_n,
        frame2_V_V_read,
        frame2_1_V_V_dout,
        frame2_1_V_V_empty_n,
        frame2_1_V_V_read,
        frame2_2_V_V_dout,
        frame2_2_V_V_empty_n,
        frame2_2_V_V_read,
        frame2_3_V_V_dout,
        frame2_3_V_V_empty_n,
        frame2_3_V_V_read,
        frame3_V_V_dout,
        frame3_V_V_empty_n,
        frame3_V_V_read,
        frame3_1_V_V_dout,
        frame3_1_V_V_empty_n,
        frame3_1_V_V_read,
        frame3_2_V_V_dout,
        frame3_2_V_V_empty_n,
        frame3_2_V_V_read,
        frame3_3_V_V_dout,
        frame3_3_V_V_empty_n,
        frame3_3_V_V_read,
        frame4_V_V_dout,
        frame4_V_V_empty_n,
        frame4_V_V_read,
        frame4_1_V_V_dout,
        frame4_1_V_V_empty_n,
        frame4_1_V_V_read,
        frame4_2_V_V_dout,
        frame4_2_V_V_empty_n,
        frame4_2_V_V_read,
        frame4_3_V_V_dout,
        frame4_3_V_V_empty_n,
        frame4_3_V_V_read,
        frame5_V_V_dout,
        frame5_V_V_empty_n,
        frame5_V_V_read,
        frame5_1_V_V_dout,
        frame5_1_V_V_empty_n,
        frame5_1_V_V_read,
        frame5_2_V_V_dout,
        frame5_2_V_V_empty_n,
        frame5_2_V_V_read,
        frame5_3_V_V_dout,
        frame5_3_V_V_empty_n,
        frame5_3_V_V_read,
        gradient_z_V_V_din,
        gradient_z_V_V_full_n,
        gradient_z_V_V_write,
        gradient_z_1_V_V_din,
        gradient_z_1_V_V_full_n,
        gradient_z_1_V_V_write,
        gradient_z_2_V_V_din,
        gradient_z_2_V_V_full_n,
        gradient_z_2_V_V_write,
        gradient_z_3_V_V_din,
        gradient_z_3_V_V_full_n,
        gradient_z_3_V_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state10 = 4'd4;
parameter    ap_ST_fsm_state11 = 4'd8;

input   ap_clk;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [16:0] frame1_V_V_dout;
input   frame1_V_V_empty_n;
output   frame1_V_V_read;
input  [16:0] frame1_1_V_V_dout;
input   frame1_1_V_V_empty_n;
output   frame1_1_V_V_read;
input  [16:0] frame1_2_V_V_dout;
input   frame1_2_V_V_empty_n;
output   frame1_2_V_V_read;
input  [16:0] frame1_3_V_V_dout;
input   frame1_3_V_V_empty_n;
output   frame1_3_V_V_read;
input  [16:0] frame2_V_V_dout;
input   frame2_V_V_empty_n;
output   frame2_V_V_read;
input  [16:0] frame2_1_V_V_dout;
input   frame2_1_V_V_empty_n;
output   frame2_1_V_V_read;
input  [16:0] frame2_2_V_V_dout;
input   frame2_2_V_V_empty_n;
output   frame2_2_V_V_read;
input  [16:0] frame2_3_V_V_dout;
input   frame2_3_V_V_empty_n;
output   frame2_3_V_V_read;
input  [16:0] frame3_V_V_dout;
input   frame3_V_V_empty_n;
output   frame3_V_V_read;
input  [16:0] frame3_1_V_V_dout;
input   frame3_1_V_V_empty_n;
output   frame3_1_V_V_read;
input  [16:0] frame3_2_V_V_dout;
input   frame3_2_V_V_empty_n;
output   frame3_2_V_V_read;
input  [16:0] frame3_3_V_V_dout;
input   frame3_3_V_V_empty_n;
output   frame3_3_V_V_read;
input  [16:0] frame4_V_V_dout;
input   frame4_V_V_empty_n;
output   frame4_V_V_read;
input  [16:0] frame4_1_V_V_dout;
input   frame4_1_V_V_empty_n;
output   frame4_1_V_V_read;
input  [16:0] frame4_2_V_V_dout;
input   frame4_2_V_V_empty_n;
output   frame4_2_V_V_read;
input  [16:0] frame4_3_V_V_dout;
input   frame4_3_V_V_empty_n;
output   frame4_3_V_V_read;
input  [16:0] frame5_V_V_dout;
input   frame5_V_V_empty_n;
output   frame5_V_V_read;
input  [16:0] frame5_1_V_V_dout;
input   frame5_1_V_V_empty_n;
output   frame5_1_V_V_read;
input  [16:0] frame5_2_V_V_dout;
input   frame5_2_V_V_empty_n;
output   frame5_2_V_V_read;
input  [16:0] frame5_3_V_V_dout;
input   frame5_3_V_V_empty_n;
output   frame5_3_V_V_read;
output  [31:0] gradient_z_V_V_din;
input   gradient_z_V_V_full_n;
output   gradient_z_V_V_write;
output  [31:0] gradient_z_1_V_V_din;
input   gradient_z_1_V_V_full_n;
output   gradient_z_1_V_V_write;
output  [31:0] gradient_z_2_V_V_din;
input   gradient_z_2_V_V_full_n;
output   gradient_z_2_V_V_write;
output  [31:0] gradient_z_3_V_V_din;
input   gradient_z_3_V_V_full_n;
output   gradient_z_3_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg frame1_V_V_read;
reg frame1_1_V_V_read;
reg frame1_2_V_V_read;
reg frame1_3_V_V_read;
reg frame2_V_V_read;
reg frame2_1_V_V_read;
reg frame2_2_V_V_read;
reg frame2_3_V_V_read;
reg frame3_V_V_read;
reg frame3_1_V_V_read;
reg frame3_2_V_V_read;
reg frame3_3_V_V_read;
reg frame4_V_V_read;
reg frame4_1_V_V_read;
reg frame4_2_V_V_read;
reg frame4_3_V_V_read;
reg frame5_V_V_read;
reg frame5_1_V_V_read;
reg frame5_2_V_V_read;
reg frame5_3_V_V_read;
reg gradient_z_V_V_write;
reg gradient_z_1_V_V_write;
reg gradient_z_2_V_V_write;
reg gradient_z_3_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    frame1_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln155_reg_754;
reg    frame1_1_V_V_blk_n;
reg    frame1_2_V_V_blk_n;
reg    frame1_3_V_V_blk_n;
reg    frame2_V_V_blk_n;
reg    frame2_1_V_V_blk_n;
reg    frame2_2_V_V_blk_n;
reg    frame2_3_V_V_blk_n;
reg    frame3_V_V_blk_n;
reg    frame3_1_V_V_blk_n;
reg    frame3_2_V_V_blk_n;
reg    frame3_3_V_V_blk_n;
reg    frame4_V_V_blk_n;
reg    frame4_1_V_V_blk_n;
reg    frame4_2_V_V_blk_n;
reg    frame4_3_V_V_blk_n;
reg    frame5_V_V_blk_n;
reg    frame5_1_V_V_blk_n;
reg    frame5_2_V_V_blk_n;
reg    frame5_3_V_V_blk_n;
reg    gradient_z_V_V_blk_n;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] icmp_ln155_reg_754_pp0_iter6_reg;
reg    gradient_z_1_V_V_blk_n;
reg    gradient_z_2_V_V_blk_n;
reg    gradient_z_3_V_V_blk_n;
reg   [17:0] indvar_flatten_reg_266;
wire   [17:0] add_ln155_fu_277_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln155_fu_283_p2;
reg   [0:0] icmp_ln155_reg_754_pp0_iter1_reg;
reg   [0:0] icmp_ln155_reg_754_pp0_iter2_reg;
reg   [0:0] icmp_ln155_reg_754_pp0_iter3_reg;
reg   [0:0] icmp_ln155_reg_754_pp0_iter4_reg;
reg   [0:0] icmp_ln155_reg_754_pp0_iter5_reg;
reg   [16:0] f1_V_reg_758;
reg   [16:0] f5_V_reg_763;
wire   [17:0] sub_ln731_fu_297_p2;
reg   [17:0] sub_ln731_reg_768;
reg   [16:0] f1_V_1_reg_773;
reg   [16:0] f5_V_1_reg_778;
wire   [17:0] sub_ln731_2_fu_311_p2;
reg   [17:0] sub_ln731_2_reg_783;
reg   [16:0] f1_V_2_reg_788;
reg   [16:0] f5_V_2_reg_793;
wire   [17:0] sub_ln731_4_fu_325_p2;
reg   [17:0] sub_ln731_4_reg_798;
reg   [16:0] f1_V_3_reg_803;
reg   [16:0] f5_V_3_reg_808;
wire   [17:0] sub_ln731_6_fu_339_p2;
reg   [17:0] sub_ln731_6_reg_813;
wire   [20:0] sub_ln731_1_fu_364_p2;
reg   [20:0] sub_ln731_1_reg_818;
reg   [0:0] tmp_118_reg_823;
reg   [0:0] tmp_118_reg_823_pp0_iter3_reg;
reg   [0:0] tmp_118_reg_823_pp0_iter4_reg;
reg   [0:0] tmp_118_reg_823_pp0_iter5_reg;
reg   [0:0] tmp_118_reg_823_pp0_iter6_reg;
wire   [20:0] sub_ln731_3_fu_397_p2;
reg   [20:0] sub_ln731_3_reg_829;
reg   [0:0] tmp_120_reg_834;
reg   [0:0] tmp_120_reg_834_pp0_iter3_reg;
reg   [0:0] tmp_120_reg_834_pp0_iter4_reg;
reg   [0:0] tmp_120_reg_834_pp0_iter5_reg;
reg   [0:0] tmp_120_reg_834_pp0_iter6_reg;
wire   [20:0] sub_ln731_5_fu_430_p2;
reg   [20:0] sub_ln731_5_reg_840;
reg   [0:0] tmp_123_reg_845;
reg   [0:0] tmp_123_reg_845_pp0_iter3_reg;
reg   [0:0] tmp_123_reg_845_pp0_iter4_reg;
reg   [0:0] tmp_123_reg_845_pp0_iter5_reg;
reg   [0:0] tmp_123_reg_845_pp0_iter6_reg;
wire   [20:0] sub_ln731_7_fu_463_p2;
reg   [20:0] sub_ln731_7_reg_851;
reg   [0:0] tmp_126_reg_856;
reg   [0:0] tmp_126_reg_856_pp0_iter3_reg;
reg   [0:0] tmp_126_reg_856_pp0_iter4_reg;
reg   [0:0] tmp_126_reg_856_pp0_iter5_reg;
reg   [0:0] tmp_126_reg_856_pp0_iter6_reg;
wire   [64:0] grp_fu_488_p2;
reg   [64:0] mul_ln1148_reg_882;
reg   [28:0] tmp_reg_887;
wire   [64:0] grp_fu_505_p2;
reg   [64:0] mul_ln1148_1_reg_892;
reg   [28:0] tmp_122_reg_897;
wire   [64:0] grp_fu_522_p2;
reg   [64:0] mul_ln1148_2_reg_902;
reg   [28:0] tmp_125_reg_907;
wire   [64:0] grp_fu_539_p2;
reg   [64:0] mul_ln1148_3_reg_912;
reg   [28:0] tmp_128_reg_917;
wire  signed [31:0] sext_ln1148_2_fu_604_p1;
reg  signed [31:0] sext_ln1148_2_reg_922;
wire   [31:0] sub_ln1148_1_fu_614_p2;
reg   [31:0] sub_ln1148_1_reg_927;
wire  signed [31:0] sext_ln1148_5_fu_639_p1;
reg  signed [31:0] sext_ln1148_5_reg_932;
wire   [31:0] sub_ln1148_3_fu_649_p2;
reg   [31:0] sub_ln1148_3_reg_937;
wire  signed [31:0] sext_ln1148_8_fu_674_p1;
reg  signed [31:0] sext_ln1148_8_reg_942;
wire   [31:0] sub_ln1148_5_fu_684_p2;
reg   [31:0] sub_ln1148_5_reg_947;
wire  signed [31:0] sext_ln1148_11_fu_709_p1;
reg  signed [31:0] sext_ln1148_11_reg_952;
wire   [31:0] sub_ln1148_7_fu_719_p2;
reg   [31:0] sub_ln1148_7_reg_957;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_block_pp0_stage0_01001;
wire  signed [17:0] sext_ln731_2_fu_293_p1;
wire  signed [17:0] sext_ln731_fu_289_p1;
wire  signed [17:0] sext_ln731_6_fu_307_p1;
wire  signed [17:0] sext_ln731_4_fu_303_p1;
wire  signed [17:0] sext_ln731_10_fu_321_p1;
wire  signed [17:0] sext_ln731_8_fu_317_p1;
wire  signed [17:0] sext_ln731_14_fu_335_p1;
wire  signed [17:0] sext_ln731_12_fu_331_p1;
wire   [20:0] shl_ln_fu_351_p3;
wire  signed [20:0] sext_ln731_1_fu_345_p1;
wire   [20:0] add_ln731_fu_358_p2;
wire  signed [20:0] sext_ln731_3_fu_348_p1;
wire   [20:0] shl_ln731_2_fu_384_p3;
wire  signed [20:0] sext_ln731_5_fu_378_p1;
wire   [20:0] add_ln731_1_fu_391_p2;
wire  signed [20:0] sext_ln731_7_fu_381_p1;
wire   [20:0] shl_ln731_4_fu_417_p3;
wire  signed [20:0] sext_ln731_9_fu_411_p1;
wire   [20:0] add_ln731_2_fu_424_p2;
wire  signed [20:0] sext_ln731_11_fu_414_p1;
wire   [20:0] shl_ln731_6_fu_450_p3;
wire  signed [20:0] sext_ln731_13_fu_444_p1;
wire   [20:0] add_ln731_3_fu_457_p2;
wire  signed [20:0] sext_ln731_15_fu_447_p1;
wire  signed [31:0] px_V_fu_477_p3;
wire   [33:0] grp_fu_488_p1;
wire  signed [31:0] px_V_1_fu_494_p3;
wire   [33:0] grp_fu_505_p1;
wire  signed [31:0] px_V_2_fu_511_p3;
wire   [33:0] grp_fu_522_p1;
wire  signed [31:0] px_V_3_fu_528_p3;
wire   [33:0] grp_fu_539_p1;
wire   [64:0] sub_ln1148_fu_585_p2;
wire   [28:0] tmp_119_fu_590_p4;
wire  signed [31:0] sext_ln1148_1_fu_600_p1;
wire   [31:0] select_ln1148_fu_607_p3;
wire   [64:0] sub_ln1148_2_fu_620_p2;
wire   [28:0] tmp_121_fu_625_p4;
wire  signed [31:0] sext_ln1148_4_fu_635_p1;
wire   [31:0] select_ln1148_2_fu_642_p3;
wire   [64:0] sub_ln1148_4_fu_655_p2;
wire   [28:0] tmp_124_fu_660_p4;
wire  signed [31:0] sext_ln1148_7_fu_670_p1;
wire   [31:0] select_ln1148_4_fu_677_p3;
wire   [64:0] sub_ln1148_6_fu_690_p2;
wire   [28:0] tmp_127_fu_695_p4;
wire  signed [31:0] sext_ln1148_10_fu_705_p1;
wire   [31:0] select_ln1148_6_fu_712_p3;
reg    grp_fu_488_ce;
reg    grp_fu_505_ce;
reg    grp_fu_522_ce;
reg    grp_fu_539_ce;
wire    ap_CS_fsm_state11;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

optical_flow_mul_32s_34ns_65_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_3_1_U53(
    .clk(ap_clk),
    .reset(1'b0),
    .din0(px_V_fu_477_p3),
    .din1(grp_fu_488_p1),
    .ce(grp_fu_488_ce),
    .dout(grp_fu_488_p2)
);

optical_flow_mul_32s_34ns_65_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_3_1_U54(
    .clk(ap_clk),
    .reset(1'b0),
    .din0(px_V_1_fu_494_p3),
    .din1(grp_fu_505_p1),
    .ce(grp_fu_505_ce),
    .dout(grp_fu_505_p2)
);

optical_flow_mul_32s_34ns_65_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_3_1_U55(
    .clk(ap_clk),
    .reset(1'b0),
    .din0(px_V_2_fu_511_p3),
    .din1(grp_fu_522_p1),
    .ce(grp_fu_522_ce),
    .dout(grp_fu_522_p2)
);

optical_flow_mul_32s_34ns_65_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_3_1_U56(
    .clk(ap_clk),
    .reset(1'b0),
    .din0(px_V_3_fu_528_p3),
    .din1(grp_fu_539_p1),
    .ce(grp_fu_539_ce),
    .dout(grp_fu_539_p2)
);

always @ (posedge ap_clk) begin
    ap_CS_fsm <= ap_NS_fsm;
end

always @ (posedge ap_clk) begin
    if ((ap_continue == 1'b1)) begin
        ap_done_reg <= 1'b0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done_reg <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_enable_reg_pp0_iter0 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
        if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b1 == 1'b1)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
        ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln155_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_266 <= add_ln155_fu_277_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_266 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        f1_V_1_reg_773 <= frame1_1_V_V_dout;
        f1_V_2_reg_788 <= frame1_2_V_V_dout;
        f1_V_3_reg_803 <= frame1_3_V_V_dout;
        f1_V_reg_758 <= frame1_V_V_dout;
        f5_V_1_reg_778 <= frame5_1_V_V_dout;
        f5_V_2_reg_793 <= frame5_2_V_V_dout;
        f5_V_3_reg_808 <= frame5_3_V_V_dout;
        f5_V_reg_763 <= frame5_V_V_dout;
        sub_ln731_2_reg_783 <= sub_ln731_2_fu_311_p2;
        sub_ln731_4_reg_798 <= sub_ln731_4_fu_325_p2;
        sub_ln731_6_reg_813 <= sub_ln731_6_fu_339_p2;
        sub_ln731_reg_768 <= sub_ln731_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln155_reg_754 <= icmp_ln155_fu_283_p2;
        icmp_ln155_reg_754_pp0_iter1_reg <= icmp_ln155_reg_754;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln155_reg_754_pp0_iter2_reg <= icmp_ln155_reg_754_pp0_iter1_reg;
        icmp_ln155_reg_754_pp0_iter3_reg <= icmp_ln155_reg_754_pp0_iter2_reg;
        icmp_ln155_reg_754_pp0_iter4_reg <= icmp_ln155_reg_754_pp0_iter3_reg;
        icmp_ln155_reg_754_pp0_iter5_reg <= icmp_ln155_reg_754_pp0_iter4_reg;
        icmp_ln155_reg_754_pp0_iter6_reg <= icmp_ln155_reg_754_pp0_iter5_reg;
        tmp_118_reg_823_pp0_iter3_reg <= tmp_118_reg_823;
        tmp_118_reg_823_pp0_iter4_reg <= tmp_118_reg_823_pp0_iter3_reg;
        tmp_118_reg_823_pp0_iter5_reg <= tmp_118_reg_823_pp0_iter4_reg;
        tmp_118_reg_823_pp0_iter6_reg <= tmp_118_reg_823_pp0_iter5_reg;
        tmp_120_reg_834_pp0_iter3_reg <= tmp_120_reg_834;
        tmp_120_reg_834_pp0_iter4_reg <= tmp_120_reg_834_pp0_iter3_reg;
        tmp_120_reg_834_pp0_iter5_reg <= tmp_120_reg_834_pp0_iter4_reg;
        tmp_120_reg_834_pp0_iter6_reg <= tmp_120_reg_834_pp0_iter5_reg;
        tmp_123_reg_845_pp0_iter3_reg <= tmp_123_reg_845;
        tmp_123_reg_845_pp0_iter4_reg <= tmp_123_reg_845_pp0_iter3_reg;
        tmp_123_reg_845_pp0_iter5_reg <= tmp_123_reg_845_pp0_iter4_reg;
        tmp_123_reg_845_pp0_iter6_reg <= tmp_123_reg_845_pp0_iter5_reg;
        tmp_126_reg_856_pp0_iter3_reg <= tmp_126_reg_856;
        tmp_126_reg_856_pp0_iter4_reg <= tmp_126_reg_856_pp0_iter3_reg;
        tmp_126_reg_856_pp0_iter5_reg <= tmp_126_reg_856_pp0_iter4_reg;
        tmp_126_reg_856_pp0_iter6_reg <= tmp_126_reg_856_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln155_reg_754_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln1148_1_reg_892 <= grp_fu_505_p2;
        mul_ln1148_2_reg_902 <= grp_fu_522_p2;
        mul_ln1148_3_reg_912 <= grp_fu_539_p2;
        mul_ln1148_reg_882 <= grp_fu_488_p2;
        tmp_122_reg_897 <= {{grp_fu_505_p2[64:36]}};
        tmp_125_reg_907 <= {{grp_fu_522_p2[64:36]}};
        tmp_128_reg_917 <= {{grp_fu_539_p2[64:36]}};
        tmp_reg_887 <= {{grp_fu_488_p2[64:36]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln155_reg_754_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sext_ln1148_11_reg_952 <= sext_ln1148_11_fu_709_p1;
        sext_ln1148_2_reg_922 <= sext_ln1148_2_fu_604_p1;
        sext_ln1148_5_reg_932 <= sext_ln1148_5_fu_639_p1;
        sext_ln1148_8_reg_942 <= sext_ln1148_8_fu_674_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_118_reg_823_pp0_iter5_reg == 1'd1) & (icmp_ln155_reg_754_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln1148_1_reg_927 <= sub_ln1148_1_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_120_reg_834_pp0_iter5_reg == 1'd1) & (icmp_ln155_reg_754_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln1148_3_reg_937 <= sub_ln1148_3_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_123_reg_845_pp0_iter5_reg == 1'd1) & (icmp_ln155_reg_754_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln1148_5_reg_947 <= sub_ln1148_5_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_126_reg_856_pp0_iter5_reg == 1'd1) & (icmp_ln155_reg_754_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln1148_7_reg_957 <= sub_ln1148_7_fu_719_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln155_reg_754_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln731_1_reg_818 <= sub_ln731_1_fu_364_p2;
        sub_ln731_3_reg_829 <= sub_ln731_3_fu_397_p2;
        sub_ln731_5_reg_840 <= sub_ln731_5_fu_430_p2;
        sub_ln731_7_reg_851 <= sub_ln731_7_fu_463_p2;
        tmp_118_reg_823 <= sub_ln731_1_fu_364_p2[32'd20];
        tmp_120_reg_834 <= sub_ln731_3_fu_397_p2[32'd20];
        tmp_123_reg_845 <= sub_ln731_5_fu_430_p2[32'd20];
        tmp_126_reg_856 <= sub_ln731_7_fu_463_p2[32'd20];
    end
end

always @ (*) begin
    if ((icmp_ln155_fu_283_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame1_1_V_V_blk_n = frame1_1_V_V_empty_n;
    end else begin
        frame1_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame1_1_V_V_read = 1'b1;
    end else begin
        frame1_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame1_2_V_V_blk_n = frame1_2_V_V_empty_n;
    end else begin
        frame1_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame1_2_V_V_read = 1'b1;
    end else begin
        frame1_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame1_3_V_V_blk_n = frame1_3_V_V_empty_n;
    end else begin
        frame1_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame1_3_V_V_read = 1'b1;
    end else begin
        frame1_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame1_V_V_blk_n = frame1_V_V_empty_n;
    end else begin
        frame1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame1_V_V_read = 1'b1;
    end else begin
        frame1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame2_1_V_V_blk_n = frame2_1_V_V_empty_n;
    end else begin
        frame2_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame2_1_V_V_read = 1'b1;
    end else begin
        frame2_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame2_2_V_V_blk_n = frame2_2_V_V_empty_n;
    end else begin
        frame2_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame2_2_V_V_read = 1'b1;
    end else begin
        frame2_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame2_3_V_V_blk_n = frame2_3_V_V_empty_n;
    end else begin
        frame2_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame2_3_V_V_read = 1'b1;
    end else begin
        frame2_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame2_V_V_blk_n = frame2_V_V_empty_n;
    end else begin
        frame2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame2_V_V_read = 1'b1;
    end else begin
        frame2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame3_1_V_V_blk_n = frame3_1_V_V_empty_n;
    end else begin
        frame3_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame3_1_V_V_read = 1'b1;
    end else begin
        frame3_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame3_2_V_V_blk_n = frame3_2_V_V_empty_n;
    end else begin
        frame3_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame3_2_V_V_read = 1'b1;
    end else begin
        frame3_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame3_3_V_V_blk_n = frame3_3_V_V_empty_n;
    end else begin
        frame3_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame3_3_V_V_read = 1'b1;
    end else begin
        frame3_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame3_V_V_blk_n = frame3_V_V_empty_n;
    end else begin
        frame3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame3_V_V_read = 1'b1;
    end else begin
        frame3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame4_1_V_V_blk_n = frame4_1_V_V_empty_n;
    end else begin
        frame4_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame4_1_V_V_read = 1'b1;
    end else begin
        frame4_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame4_2_V_V_blk_n = frame4_2_V_V_empty_n;
    end else begin
        frame4_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame4_2_V_V_read = 1'b1;
    end else begin
        frame4_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame4_3_V_V_blk_n = frame4_3_V_V_empty_n;
    end else begin
        frame4_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame4_3_V_V_read = 1'b1;
    end else begin
        frame4_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame4_V_V_blk_n = frame4_V_V_empty_n;
    end else begin
        frame4_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame4_V_V_read = 1'b1;
    end else begin
        frame4_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame5_1_V_V_blk_n = frame5_1_V_V_empty_n;
    end else begin
        frame5_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame5_1_V_V_read = 1'b1;
    end else begin
        frame5_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame5_2_V_V_blk_n = frame5_2_V_V_empty_n;
    end else begin
        frame5_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame5_2_V_V_read = 1'b1;
    end else begin
        frame5_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame5_3_V_V_blk_n = frame5_3_V_V_empty_n;
    end else begin
        frame5_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame5_3_V_V_read = 1'b1;
    end else begin
        frame5_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame5_V_V_blk_n = frame5_V_V_empty_n;
    end else begin
        frame5_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        frame5_V_V_read = 1'b1;
    end else begin
        frame5_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gradient_z_1_V_V_blk_n = gradient_z_1_V_V_full_n;
    end else begin
        gradient_z_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gradient_z_1_V_V_write = 1'b1;
    end else begin
        gradient_z_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gradient_z_2_V_V_blk_n = gradient_z_2_V_V_full_n;
    end else begin
        gradient_z_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gradient_z_2_V_V_write = 1'b1;
    end else begin
        gradient_z_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gradient_z_3_V_V_blk_n = gradient_z_3_V_V_full_n;
    end else begin
        gradient_z_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gradient_z_3_V_V_write = 1'b1;
    end else begin
        gradient_z_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gradient_z_V_V_blk_n = gradient_z_V_V_full_n;
    end else begin
        gradient_z_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gradient_z_V_V_write = 1'b1;
    end else begin
        gradient_z_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_488_ce = 1'b1;
    end else begin
        grp_fu_488_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_505_ce = 1'b1;
    end else begin
        grp_fu_505_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_522_ce = 1'b1;
    end else begin
        grp_fu_522_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_539_ce = 1'b1;
    end else begin
        grp_fu_539_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln155_fu_283_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln155_fu_283_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln155_fu_277_p2 = (indvar_flatten_reg_266 + 18'd1);

assign add_ln731_1_fu_391_p2 = ($signed(shl_ln731_2_fu_384_p3) + $signed(sext_ln731_5_fu_378_p1));

assign add_ln731_2_fu_424_p2 = ($signed(shl_ln731_4_fu_417_p3) + $signed(sext_ln731_9_fu_411_p1));

assign add_ln731_3_fu_457_p2 = ($signed(shl_ln731_6_fu_450_p3) + $signed(sext_ln731_13_fu_444_p1));

assign add_ln731_fu_358_p2 = ($signed(shl_ln_fu_351_p3) + $signed(sext_ln731_1_fu_345_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter7 == 1'b1) & (((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_3_V_V_full_n == 1'b0)) | ((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_2_V_V_full_n == 1'b0)) | ((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_1_V_V_full_n == 1'b0)) | ((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_V_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((frame4_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame5_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame4_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame5_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame4_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame5_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame4_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((icmp_ln155_reg_754 == 1'd0) & (frame5_3_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter7 == 1'b1) & (((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_3_V_V_full_n == 1'b0)) | ((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_2_V_V_full_n == 1'b0)) | ((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_1_V_V_full_n == 1'b0)) | ((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_V_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((frame4_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame5_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame4_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame5_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame4_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame5_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame4_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((icmp_ln155_reg_754 == 1'd0) & (frame5_3_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter7 == 1'b1) & (((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_3_V_V_full_n == 1'b0)) | ((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_2_V_V_full_n == 1'b0)) | ((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_1_V_V_full_n == 1'b0)) | ((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_V_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((frame4_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame5_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame4_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame5_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame4_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame5_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame4_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((icmp_ln155_reg_754 == 1'd0) & (frame5_3_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((frame4_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame5_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame4_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame5_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame4_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame5_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame4_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame3_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame2_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((frame1_V_V_empty_n == 1'b0) & (icmp_ln155_reg_754 == 1'd0)) | ((icmp_ln155_reg_754 == 1'd0) & (frame5_3_V_V_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter7 = (((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_3_V_V_full_n == 1'b0)) | ((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_2_V_V_full_n == 1'b0)) | ((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_1_V_V_full_n == 1'b0)) | ((icmp_ln155_reg_754_pp0_iter6_reg == 1'd0) & (gradient_z_V_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign gradient_z_1_V_V_din = ((tmp_120_reg_834_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln1148_3_reg_937 : sext_ln1148_5_reg_932);

assign gradient_z_2_V_V_din = ((tmp_123_reg_845_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln1148_5_reg_947 : sext_ln1148_8_reg_942);

assign gradient_z_3_V_V_din = ((tmp_126_reg_856_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln1148_7_reg_957 : sext_ln1148_11_reg_952);

assign gradient_z_V_V_din = ((tmp_118_reg_823_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln1148_1_reg_927 : sext_ln1148_2_reg_922);

assign grp_fu_488_p1 = 65'd5726623062;

assign grp_fu_505_p1 = 65'd5726623062;

assign grp_fu_522_p1 = 65'd5726623062;

assign grp_fu_539_p1 = 65'd5726623062;

assign icmp_ln155_fu_283_p2 = ((indvar_flatten_reg_266 == 18'd131072) ? 1'b1 : 1'b0);

assign px_V_1_fu_494_p3 = {{sub_ln731_3_reg_829}, {11'd0}};

assign px_V_2_fu_511_p3 = {{sub_ln731_5_reg_840}, {11'd0}};

assign px_V_3_fu_528_p3 = {{sub_ln731_7_reg_851}, {11'd0}};

assign px_V_fu_477_p3 = {{sub_ln731_1_reg_818}, {11'd0}};

assign select_ln1148_2_fu_642_p3 = ((tmp_120_reg_834_pp0_iter5_reg[0:0] == 1'b1) ? sext_ln1148_4_fu_635_p1 : sext_ln1148_5_fu_639_p1);

assign select_ln1148_4_fu_677_p3 = ((tmp_123_reg_845_pp0_iter5_reg[0:0] == 1'b1) ? sext_ln1148_7_fu_670_p1 : sext_ln1148_8_fu_674_p1);

assign select_ln1148_6_fu_712_p3 = ((tmp_126_reg_856_pp0_iter5_reg[0:0] == 1'b1) ? sext_ln1148_10_fu_705_p1 : sext_ln1148_11_fu_709_p1);

assign select_ln1148_fu_607_p3 = ((tmp_118_reg_823_pp0_iter5_reg[0:0] == 1'b1) ? sext_ln1148_1_fu_600_p1 : sext_ln1148_2_fu_604_p1);

assign sext_ln1148_10_fu_705_p1 = $signed(tmp_127_fu_695_p4);

assign sext_ln1148_11_fu_709_p1 = $signed(tmp_128_reg_917);

assign sext_ln1148_1_fu_600_p1 = $signed(tmp_119_fu_590_p4);

assign sext_ln1148_2_fu_604_p1 = $signed(tmp_reg_887);

assign sext_ln1148_4_fu_635_p1 = $signed(tmp_121_fu_625_p4);

assign sext_ln1148_5_fu_639_p1 = $signed(tmp_122_reg_897);

assign sext_ln1148_7_fu_670_p1 = $signed(tmp_124_fu_660_p4);

assign sext_ln1148_8_fu_674_p1 = $signed(tmp_125_reg_907);

assign sext_ln731_10_fu_321_p1 = $signed(frame4_2_V_V_dout);

assign sext_ln731_11_fu_414_p1 = $signed(f5_V_2_reg_793);

assign sext_ln731_12_fu_331_p1 = $signed(frame2_3_V_V_dout);

assign sext_ln731_13_fu_444_p1 = $signed(f1_V_3_reg_803);

assign sext_ln731_14_fu_335_p1 = $signed(frame4_3_V_V_dout);

assign sext_ln731_15_fu_447_p1 = $signed(f5_V_3_reg_808);

assign sext_ln731_1_fu_345_p1 = $signed(f1_V_reg_758);

assign sext_ln731_2_fu_293_p1 = $signed(frame4_V_V_dout);

assign sext_ln731_3_fu_348_p1 = $signed(f5_V_reg_763);

assign sext_ln731_4_fu_303_p1 = $signed(frame2_1_V_V_dout);

assign sext_ln731_5_fu_378_p1 = $signed(f1_V_1_reg_773);

assign sext_ln731_6_fu_307_p1 = $signed(frame4_1_V_V_dout);

assign sext_ln731_7_fu_381_p1 = $signed(f5_V_1_reg_778);

assign sext_ln731_8_fu_317_p1 = $signed(frame2_2_V_V_dout);

assign sext_ln731_9_fu_411_p1 = $signed(f1_V_2_reg_788);

assign sext_ln731_fu_289_p1 = $signed(frame2_V_V_dout);

assign shl_ln731_2_fu_384_p3 = {{sub_ln731_2_reg_783}, {3'd0}};

assign shl_ln731_4_fu_417_p3 = {{sub_ln731_4_reg_798}, {3'd0}};

assign shl_ln731_6_fu_450_p3 = {{sub_ln731_6_reg_813}, {3'd0}};

assign shl_ln_fu_351_p3 = {{sub_ln731_reg_768}, {3'd0}};

assign sub_ln1148_1_fu_614_p2 = (32'd0 - select_ln1148_fu_607_p3);

assign sub_ln1148_2_fu_620_p2 = (65'd0 - mul_ln1148_1_reg_892);

assign sub_ln1148_3_fu_649_p2 = (32'd0 - select_ln1148_2_fu_642_p3);

assign sub_ln1148_4_fu_655_p2 = (65'd0 - mul_ln1148_2_reg_902);

assign sub_ln1148_5_fu_684_p2 = (32'd0 - select_ln1148_4_fu_677_p3);

assign sub_ln1148_6_fu_690_p2 = (65'd0 - mul_ln1148_3_reg_912);

assign sub_ln1148_7_fu_719_p2 = (32'd0 - select_ln1148_6_fu_712_p3);

assign sub_ln1148_fu_585_p2 = (65'd0 - mul_ln1148_reg_882);

assign sub_ln731_1_fu_364_p2 = ($signed(add_ln731_fu_358_p2) - $signed(sext_ln731_3_fu_348_p1));

assign sub_ln731_2_fu_311_p2 = ($signed(sext_ln731_6_fu_307_p1) - $signed(sext_ln731_4_fu_303_p1));

assign sub_ln731_3_fu_397_p2 = ($signed(add_ln731_1_fu_391_p2) - $signed(sext_ln731_7_fu_381_p1));

assign sub_ln731_4_fu_325_p2 = ($signed(sext_ln731_10_fu_321_p1) - $signed(sext_ln731_8_fu_317_p1));

assign sub_ln731_5_fu_430_p2 = ($signed(add_ln731_2_fu_424_p2) - $signed(sext_ln731_11_fu_414_p1));

assign sub_ln731_6_fu_339_p2 = ($signed(sext_ln731_14_fu_335_p1) - $signed(sext_ln731_12_fu_331_p1));

assign sub_ln731_7_fu_463_p2 = ($signed(add_ln731_3_fu_457_p2) - $signed(sext_ln731_15_fu_447_p1));

assign sub_ln731_fu_297_p2 = ($signed(sext_ln731_2_fu_293_p1) - $signed(sext_ln731_fu_289_p1));

assign tmp_119_fu_590_p4 = {{sub_ln1148_fu_585_p2[64:36]}};

assign tmp_121_fu_625_p4 = {{sub_ln1148_2_fu_620_p2[64:36]}};

assign tmp_124_fu_660_p4 = {{sub_ln1148_4_fu_655_p2[64:36]}};

assign tmp_127_fu_695_p4 = {{sub_ln1148_6_fu_690_p2[64:36]}};

endmodule //optical_flow_gradient_z_calc
